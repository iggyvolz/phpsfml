// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////

// This file is generated by the command (thanks https://www.php.net/manual/en/ffi.load.php#125128):
// `cpp -P -C -D "__attribute__(ARGS)=" -I. SFML/Network.h` then removing comments and declarations from other libraries
// This is done to remove all the "junk" that FFI can't process
typedef int sfBool;
typedef signed char sfInt8;
typedef unsigned char sfUint8;
typedef signed short sfInt16;
typedef unsigned short sfUint16;
typedef signed int sfInt32;
typedef unsigned int sfUint32;
    typedef signed long long sfInt64;
    typedef unsigned long long sfUint64;
typedef int wchar_t;
typedef struct
{
    sfInt64 microseconds;
} sfTime;
typedef struct sfClock sfClock;
typedef struct sfMutex sfMutex;
typedef struct sfThread sfThread;
typedef sfInt64 (*sfInputStreamReadFunc)(void* data, sfInt64 size, void* userData);
typedef sfInt64 (*sfInputStreamSeekFunc)(sfInt64 position, void* userData);
typedef sfInt64 (*sfInputStreamTellFunc)(void* userData);
typedef sfInt64 (*sfInputStreamGetSizeFunc)(void* userData);
typedef struct sfInputStream
{
    sfInputStreamReadFunc read; ///< Function to read data from the stream
    sfInputStreamSeekFunc seek; ///< Function to set the current read position
    sfInputStreamTellFunc tell; ///< Function to get the current read position
    sfInputStreamGetSizeFunc getSize; ///< Function to get the total number of bytes in the stream
    void* userData; ///< User data that will be passed to the callbacks
} sfInputStream;
typedef struct
{
    int x;
    int y;
} sfVector2i;
typedef struct
{
    unsigned int x;
    unsigned int y;
} sfVector2u;
typedef struct
{
    float x;
    float y;
} sfVector2f;
typedef struct
{
    float x;
    float y;
    float z;
} sfVector3f;
typedef struct
{
    char address[16];
} sfIpAddress;
extern const sfIpAddress sfIpAddress_None;
extern const sfIpAddress sfIpAddress_Any;
extern const sfIpAddress sfIpAddress_LocalHost;
extern const sfIpAddress sfIpAddress_Broadcast;
extern sfIpAddress sfIpAddress_fromString(const char* address);
extern sfIpAddress sfIpAddress_fromBytes(sfUint8 byte0, sfUint8 byte1, sfUint8 byte2, sfUint8 byte3);
extern sfIpAddress sfIpAddress_fromInteger(sfUint32 address);
extern void sfIpAddress_toString(sfIpAddress address, char* string);
extern sfUint32 sfIpAddress_toInteger(sfIpAddress address);
extern sfIpAddress sfIpAddress_getLocalAddress(void);
extern sfIpAddress sfIpAddress_getPublicAddress(sfTime timeout);
typedef struct sfFtpDirectoryResponse sfFtpDirectoryResponse;
typedef struct sfFtpListingResponse sfFtpListingResponse;
typedef struct sfFtpResponse sfFtpResponse;
typedef struct sfFtp sfFtp;
typedef struct sfHttpRequest sfHttpRequest;
typedef struct sfHttpResponse sfHttpResponse;
typedef struct sfHttp sfHttp;
typedef struct sfPacket sfPacket;
typedef struct sfSocketSelector sfSocketSelector;
typedef struct sfTcpListener sfTcpListener;
typedef struct sfTcpSocket sfTcpSocket;
typedef struct sfUdpSocket sfUdpSocket;
typedef enum
{
    sfFtpBinary, ///< Binary mode (file is transfered as a sequence of bytes)
    sfFtpAscii, ///< Text mode using ASCII encoding
    sfFtpEbcdic ///< Text mode using EBCDIC encoding
} sfFtpTransferMode;
typedef enum
{
    // 1xx: the requested action is being initiated,
    // expect another reply before proceeding with a new command
    sfFtpRestartMarkerReply = 110, ///< Restart marker reply
    sfFtpServiceReadySoon = 120, ///< Service ready in N minutes
    sfFtpDataConnectionAlreadyOpened = 125, ///< Data connection already opened, transfer starting
    sfFtpOpeningDataConnection = 150, ///< File status ok, about to open data connection
    // 2xx: the requested action has been successfully completed
    sfFtpOk = 200, ///< Command ok
    sfFtpPointlessCommand = 202, ///< Command not implemented
    sfFtpSystemStatus = 211, ///< System status, or system help reply
    sfFtpDirectoryStatus = 212, ///< Directory status
    sfFtpFileStatus = 213, ///< File status
    sfFtpHelpMessage = 214, ///< Help message
    sfFtpSystemType = 215, ///< NAME system type, where NAME is an official system name from the list in the Assigned Numbers document
    sfFtpServiceReady = 220, ///< Service ready for new user
    sfFtpClosingConnection = 221, ///< Service closing control connection
    sfFtpDataConnectionOpened = 225, ///< Data connection open, no transfer in progress
    sfFtpClosingDataConnection = 226, ///< Closing data connection, requested file action successful
    sfFtpEnteringPassiveMode = 227, ///< Entering passive mode
    sfFtpLoggedIn = 230, ///< User logged in, proceed. Logged out if appropriate
    sfFtpFileActionOk = 250, ///< Requested file action ok
    sfFtpDirectoryOk = 257, ///< PATHNAME created
    // 3xx: the command has been accepted, but the requested action
    // is dormant, pending receipt of further information
    sfFtpNeedPassword = 331, ///< User name ok, need password
    sfFtpNeedAccountToLogIn = 332, ///< Need account for login
    sfFtpNeedInformation = 350, ///< Requested file action pending further information
    // 4xx: the command was not accepted and the requested action did not take place,
    // but the error condition is temporary and the action may be requested again
    sfFtpServiceUnavailable = 421, ///< Service not available, closing control connection
    sfFtpDataConnectionUnavailable = 425, ///< Can't open data connection
    sfFtpTransferAborted = 426, ///< Connection closed, transfer aborted
    sfFtpFileActionAborted = 450, ///< Requested file action not taken
    sfFtpLocalError = 451, ///< Requested action aborted, local error in processing
    sfFtpInsufficientStorageSpace = 452, ///< Requested action not taken; insufficient storage space in system, file unavailable
    // 5xx: the command was not accepted and
    // the requested action did not take place
    sfFtpCommandUnknown = 500, ///< Syntax error, command unrecognized
    sfFtpParametersUnknown = 501, ///< Syntax error in parameters or arguments
    sfFtpCommandNotImplemented = 502, ///< Command not implemented
    sfFtpBadCommandSequence = 503, ///< Bad sequence of commands
    sfFtpParameterNotImplemented = 504, ///< Command not implemented for that parameter
    sfFtpNotLoggedIn = 530, ///< Not logged in
    sfFtpNeedAccountToStore = 532, ///< Need account for storing files
    sfFtpFileUnavailable = 550, ///< Requested action not taken, file unavailable
    sfFtpPageTypeUnknown = 551, ///< Requested action aborted, page type unknown
    sfFtpNotEnoughMemory = 552, ///< Requested file action aborted, exceeded storage allocation
    sfFtpFilenameNotAllowed = 553, ///< Requested action not taken, file name not allowed
    // 10xx: SFML custom codes
    sfFtpInvalidResponse = 1000, ///< Response is not a valid FTP one
    sfFtpConnectionFailed = 1001, ///< Connection with server failed
    sfFtpConnectionClosed = 1002, ///< Connection with server closed
    sfFtpInvalidFile = 1003 ///< Invalid file to upload / download
} sfFtpStatus;
extern void sfFtpListingResponse_destroy(sfFtpListingResponse* ftpListingResponse);
extern sfBool sfFtpListingResponse_isOk(const sfFtpListingResponse* ftpListingResponse);
extern sfFtpStatus sfFtpListingResponse_getStatus(const sfFtpListingResponse* ftpListingResponse);
extern const char* sfFtpListingResponse_getMessage(const sfFtpListingResponse* ftpListingResponse);
extern size_t sfFtpListingResponse_getCount(const sfFtpListingResponse* ftpListingResponse);
extern const char* sfFtpListingResponse_getName(const sfFtpListingResponse* ftpListingResponse, size_t index);
extern void sfFtpDirectoryResponse_destroy(sfFtpDirectoryResponse* ftpDirectoryResponse);
extern sfBool sfFtpDirectoryResponse_isOk(const sfFtpDirectoryResponse* ftpDirectoryResponse);
extern sfFtpStatus sfFtpDirectoryResponse_getStatus(const sfFtpDirectoryResponse* ftpDirectoryResponse);
extern const char* sfFtpDirectoryResponse_getMessage(const sfFtpDirectoryResponse* ftpDirectoryResponse);
extern const char* sfFtpDirectoryResponse_getDirectory(const sfFtpDirectoryResponse* ftpDirectoryResponse);
extern void sfFtpResponse_destroy(sfFtpResponse* ftpResponse);
extern sfBool sfFtpResponse_isOk(const sfFtpResponse* ftpResponse);
extern sfFtpStatus sfFtpResponse_getStatus(const sfFtpResponse* ftpResponse);
extern const char* sfFtpResponse_getMessage(const sfFtpResponse* ftpResponse);
extern sfFtp* sfFtp_create(void);
extern void sfFtp_destroy(sfFtp* ftp);
extern sfFtpResponse* sfFtp_connect(sfFtp* ftp, sfIpAddress server, unsigned short port, sfTime timeout);
extern sfFtpResponse* sfFtp_loginAnonymous(sfFtp* ftp);
extern sfFtpResponse* sfFtp_login(sfFtp* ftp, const char* name, const char* password);
extern sfFtpResponse* sfFtp_disconnect(sfFtp* ftp);
extern sfFtpResponse* sfFtp_keepAlive(sfFtp* ftp);
extern sfFtpDirectoryResponse* sfFtp_getWorkingDirectory(sfFtp* ftp);
extern sfFtpListingResponse* sfFtp_getDirectoryListing(sfFtp* ftp, const char* directory);
extern sfFtpResponse* sfFtp_changeDirectory(sfFtp* ftp, const char* directory);
extern sfFtpResponse* sfFtp_parentDirectory(sfFtp* ftp);
extern sfFtpResponse* sfFtp_createDirectory(sfFtp* ftp, const char* name);
extern sfFtpResponse* sfFtp_deleteDirectory(sfFtp* ftp, const char* name);
extern sfFtpResponse* sfFtp_renameFile(sfFtp* ftp, const char* file, const char* newName);
extern sfFtpResponse* sfFtp_deleteFile(sfFtp* ftp, const char* name);
extern sfFtpResponse* sfFtp_download(sfFtp* ftp, const char* remoteFile, const char* localPath, sfFtpTransferMode mode);
extern sfFtpResponse* sfFtp_upload(sfFtp* ftp, const char* localFile, const char* remotePath, sfFtpTransferMode mode, sfBool append);
extern sfFtpResponse* sfFtp_sendCommand(sfFtp* ftp, const char* command, const char* parameter);
typedef enum
{
    sfHttpGet, ///< Request in get mode, standard method to retrieve a page
    sfHttpPost, ///< Request in post mode, usually to send data to a page
    sfHttpHead, ///< Request a page's header only
    sfHttpPut, ///< Request in put mode, useful for a REST API
    sfHttpDelete ///< Request in delete mode, useful for a REST API
} sfHttpMethod;
typedef enum
{
    // 2xx: success
    sfHttpOk = 200, ///< Most common code returned when operation was successful
    sfHttpCreated = 201, ///< The resource has successfully been created
    sfHttpAccepted = 202, ///< The request has been accepted, but will be processed later by the server
    sfHttpNoContent = 204, ///< Sent when the server didn't send any data in return
    sfHttpResetContent = 205, ///< The server informs the client that it should clear the view (form) that caused the request to be sent
    sfHttpPartialContent = 206, ///< The server has sent a part of the resource, as a response to a partial GET request
    // 3xx: redirection
    sfHttpMultipleChoices = 300, ///< The requested page can be accessed from several locations
    sfHttpMovedPermanently = 301, ///< The requested page has permanently moved to a new location
    sfHttpMovedTemporarily = 302, ///< The requested page has temporarily moved to a new location
    sfHttpNotModified = 304, ///< For conditional requests, means the requested page hasn't changed and doesn't need to be refreshed
    // 4xx: client error
    sfHttpBadRequest = 400, ///< The server couldn't understand the request (syntax error)
    sfHttpUnauthorized = 401, ///< The requested page needs an authentication to be accessed
    sfHttpForbidden = 403, ///< The requested page cannot be accessed at all, even with authentication
    sfHttpNotFound = 404, ///< The requested page doesn't exist
    sfHttpRangeNotSatisfiable = 407, ///< The server can't satisfy the partial GET request (with a "Range" header field)
    // 5xx: server error
    sfHttpInternalServerError = 500, ///< The server encountered an unexpected error
    sfHttpNotImplemented = 501, ///< The server doesn't implement a requested feature
    sfHttpBadGateway = 502, ///< The gateway server has received an error from the source server
    sfHttpServiceNotAvailable = 503, ///< The server is temporarily unavailable (overloaded, in maintenance, ...)
    sfHttpGatewayTimeout = 504, ///< The gateway server couldn't receive a response from the source server
    sfHttpVersionNotSupported = 505, ///< The server doesn't support the requested HTTP version
    // 10xx: SFML custom codes
    sfHttpInvalidResponse = 1000, ///< Response is not a valid HTTP one
    sfHttpConnectionFailed = 1001 ///< Connection with server failed
} sfHttpStatus;
extern sfHttpRequest* sfHttpRequest_create(void);
extern void sfHttpRequest_destroy(sfHttpRequest* httpRequest);
extern void sfHttpRequest_setField(sfHttpRequest* httpRequest, const char* field, const char* value);
extern void sfHttpRequest_setMethod(sfHttpRequest* httpRequest, sfHttpMethod method);
extern void sfHttpRequest_setUri(sfHttpRequest* httpRequest, const char* uri);
extern void sfHttpRequest_setHttpVersion(sfHttpRequest* httpRequest, unsigned int major, unsigned int minor);
extern void sfHttpRequest_setBody(sfHttpRequest* httpRequest, const char* body);
extern void sfHttpResponse_destroy(sfHttpResponse* httpResponse);
extern const char* sfHttpResponse_getField(const sfHttpResponse* httpResponse, const char* field);
extern sfHttpStatus sfHttpResponse_getStatus(const sfHttpResponse* httpResponse);
extern unsigned int sfHttpResponse_getMajorVersion(const sfHttpResponse* httpResponse);
extern unsigned int sfHttpResponse_getMinorVersion(const sfHttpResponse* httpResponse);
extern const char* sfHttpResponse_getBody(const sfHttpResponse* httpResponse);
extern sfHttp* sfHttp_create(void);
extern void sfHttp_destroy(sfHttp* http);
extern void sfHttp_setHost(sfHttp* http, const char* host, unsigned short port);
extern sfHttpResponse* sfHttp_sendRequest(sfHttp* http, const sfHttpRequest* request, sfTime timeout);
extern sfPacket* sfPacket_create(void);
extern sfPacket* sfPacket_copy(const sfPacket* packet);
extern void sfPacket_destroy(sfPacket* packet);
extern void sfPacket_append(sfPacket* packet, const void* data, size_t sizeInBytes);
extern void sfPacket_clear(sfPacket* packet);
extern const void* sfPacket_getData(const sfPacket* packet);
extern size_t sfPacket_getDataSize(const sfPacket* packet);
extern sfBool sfPacket_endOfPacket(const sfPacket* packet);
extern sfBool sfPacket_canRead(const sfPacket* packet);
extern sfBool sfPacket_readBool(sfPacket* packet);
extern sfInt8 sfPacket_readInt8(sfPacket* packet);
extern sfUint8 sfPacket_readUint8(sfPacket* packet);
extern sfInt16 sfPacket_readInt16(sfPacket* packet);
extern sfUint16 sfPacket_readUint16(sfPacket* packet);
extern sfInt32 sfPacket_readInt32(sfPacket* packet);
extern sfUint32 sfPacket_readUint32(sfPacket* packet);
extern float sfPacket_readFloat(sfPacket* packet);
extern double sfPacket_readDouble(sfPacket* packet);
extern void sfPacket_readString(sfPacket* packet, char* string);
extern void sfPacket_readWideString(sfPacket* packet, wchar_t* string);
extern void sfPacket_writeBool(sfPacket* packet, sfBool);
extern void sfPacket_writeInt8(sfPacket* packet, sfInt8);
extern void sfPacket_writeUint8(sfPacket* packet, sfUint8);
extern void sfPacket_writeInt16(sfPacket* packet, sfInt16);
extern void sfPacket_writeUint16(sfPacket* packet, sfUint16);
extern void sfPacket_writeInt32(sfPacket* packet, sfInt32);
extern void sfPacket_writeUint32(sfPacket* packet, sfUint32);
extern void sfPacket_writeFloat(sfPacket* packet, float);
extern void sfPacket_writeDouble(sfPacket* packet, double);
extern void sfPacket_writeString(sfPacket* packet, const char* string);
extern void sfPacket_writeWideString(sfPacket* packet, const wchar_t* string);
extern sfSocketSelector* sfSocketSelector_create(void);
extern sfSocketSelector* sfSocketSelector_copy(const sfSocketSelector* selector);
extern void sfSocketSelector_destroy(sfSocketSelector* selector);
extern void sfSocketSelector_addTcpListener(sfSocketSelector* selector, sfTcpListener* socket);
extern void sfSocketSelector_addTcpSocket(sfSocketSelector* selector, sfTcpSocket* socket);
extern void sfSocketSelector_addUdpSocket(sfSocketSelector* selector, sfUdpSocket* socket);
extern void sfSocketSelector_removeTcpListener(sfSocketSelector* selector, sfTcpListener* socket);
extern void sfSocketSelector_removeTcpSocket(sfSocketSelector* selector, sfTcpSocket* socket);
extern void sfSocketSelector_removeUdpSocket(sfSocketSelector* selector, sfUdpSocket* socket);
extern void sfSocketSelector_clear(sfSocketSelector* selector);
extern sfBool sfSocketSelector_wait(sfSocketSelector* selector, sfTime timeout);
extern sfBool sfSocketSelector_isTcpListenerReady(const sfSocketSelector* selector, sfTcpListener* socket);
extern sfBool sfSocketSelector_isTcpSocketReady(const sfSocketSelector* selector, sfTcpSocket* socket);
extern sfBool sfSocketSelector_isUdpSocketReady(const sfSocketSelector* selector, sfUdpSocket* socket);
typedef enum
{
    sfSocketDone, ///< The socket has sent / received the data
    sfSocketNotReady, ///< The socket is not ready to send / receive data yet
    sfSocketPartial, ///< The socket sent a part of the data
    sfSocketDisconnected, ///< The TCP socket has been disconnected
    sfSocketError ///< An unexpected error happened
} sfSocketStatus;
extern sfTcpListener* sfTcpListener_create(void);
extern void sfTcpListener_destroy(sfTcpListener* listener);
extern void sfTcpListener_setBlocking(sfTcpListener* listener, sfBool blocking);
extern sfBool sfTcpListener_isBlocking(const sfTcpListener* listener);
extern unsigned short sfTcpListener_getLocalPort(const sfTcpListener* listener);
extern sfSocketStatus sfTcpListener_listen(sfTcpListener* listener, unsigned short port, sfIpAddress address);
extern sfSocketStatus sfTcpListener_accept(sfTcpListener* listener, sfTcpSocket** connected);
extern sfTcpSocket* sfTcpSocket_create(void);
extern void sfTcpSocket_destroy(sfTcpSocket* socket);
extern void sfTcpSocket_setBlocking(sfTcpSocket* socket, sfBool blocking);
extern sfBool sfTcpSocket_isBlocking(const sfTcpSocket* socket);
extern unsigned short sfTcpSocket_getLocalPort(const sfTcpSocket* socket);
extern sfIpAddress sfTcpSocket_getRemoteAddress(const sfTcpSocket* socket);
extern unsigned short sfTcpSocket_getRemotePort(const sfTcpSocket* socket);
extern sfSocketStatus sfTcpSocket_connect(sfTcpSocket* socket, sfIpAddress remoteAddress, unsigned short remotePort, sfTime timeout);
extern void sfTcpSocket_disconnect(sfTcpSocket* socket);
extern sfSocketStatus sfTcpSocket_send(sfTcpSocket* socket, const void* data, size_t size);
extern sfSocketStatus sfTcpSocket_sendPartial(sfTcpSocket* socket, const void* data, size_t size, size_t* sent);
extern sfSocketStatus sfTcpSocket_receive(sfTcpSocket* socket, void* data, size_t size, size_t* received);
extern sfSocketStatus sfTcpSocket_sendPacket(sfTcpSocket* socket, sfPacket* packet);
extern sfSocketStatus sfTcpSocket_receivePacket(sfTcpSocket* socket, sfPacket* packet);
extern sfUdpSocket* sfUdpSocket_create(void);
extern void sfUdpSocket_destroy(sfUdpSocket* socket);
extern void sfUdpSocket_setBlocking(sfUdpSocket* socket, sfBool blocking);
extern sfBool sfUdpSocket_isBlocking(const sfUdpSocket* socket);
extern unsigned short sfUdpSocket_getLocalPort(const sfUdpSocket* socket);
extern sfSocketStatus sfUdpSocket_bind(sfUdpSocket* socket, unsigned short port, sfIpAddress address);
extern void sfUdpSocket_unbind(sfUdpSocket* socket);
extern sfSocketStatus sfUdpSocket_send(sfUdpSocket* socket, const void* data, size_t size, sfIpAddress remoteAddress, unsigned short remotePort);
extern sfSocketStatus sfUdpSocket_receive(sfUdpSocket* socket, void* data, size_t size, size_t* received, sfIpAddress* remoteAddress, unsigned short* remotePort);
extern sfSocketStatus sfUdpSocket_sendPacket(sfUdpSocket* socket, sfPacket* packet, sfIpAddress remoteAddress, unsigned short remotePort);
extern sfSocketStatus sfUdpSocket_receivePacket(sfUdpSocket* socket, sfPacket* packet, sfIpAddress* remoteAddress, unsigned short* remotePort);
extern unsigned int sfUdpSocket_maxDatagramSize();
