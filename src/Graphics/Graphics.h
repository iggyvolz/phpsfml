// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////

// This file is generated by the command (thanks https://www.php.net/manual/en/ffi.load.php#125128):
// `cpp -P -C -D "__attribute__(ARGS)=" -I. SFML/Graphics.h` then removing comments and declarations from other libraries
// This is done to remove all the "junk" that FFI can't process
typedef int sfBool;
typedef signed char sfInt8;
typedef unsigned char sfUint8;
typedef signed short sfInt16;
typedef unsigned short sfUint16;
typedef signed int sfInt32;
typedef unsigned int sfUint32;
    typedef signed long long sfInt64;
    typedef unsigned long long sfUint64;
typedef struct
{
    sfInt64 microseconds;
} sfTime;
typedef struct sfClock sfClock;
typedef struct sfMutex sfMutex;
typedef struct sfThread sfThread;
typedef sfInt64 (*sfInputStreamReadFunc)(void* data, sfInt64 size, void* userData);
typedef sfInt64 (*sfInputStreamSeekFunc)(sfInt64 position, void* userData);
typedef sfInt64 (*sfInputStreamTellFunc)(void* userData);
typedef sfInt64 (*sfInputStreamGetSizeFunc)(void* userData);
typedef struct sfInputStream
{
    sfInputStreamReadFunc read; ///< Function to read data from the stream
    sfInputStreamSeekFunc seek; ///< Function to set the current read position
    sfInputStreamTellFunc tell; ///< Function to get the current read position
    sfInputStreamGetSizeFunc getSize; ///< Function to get the total number of bytes in the stream
    void* userData; ///< User data that will be passed to the callbacks
} sfInputStream;
typedef struct
{
    int x;
    int y;
} sfVector2i;
typedef struct
{
    unsigned int x;
    unsigned int y;
} sfVector2u;
typedef struct
{
    float x;
    float y;
} sfVector2f;
typedef struct
{
    float x;
    float y;
    float z;
} sfVector3f;
typedef struct sfContext sfContext;
typedef struct sfCursor sfCursor;
typedef struct sfWindow sfWindow;
typedef struct
{
    const char* name;
    unsigned int vendorId;
    unsigned int productId;
} sfJoystickIdentification;
enum
{
    sfJoystickCount = 8, ///< Maximum number of supported joysticks
    sfJoystickButtonCount = 32, ///< Maximum number of supported buttons
    sfJoystickAxisCount = 8 ///< Maximum number of supported axes
};
typedef enum
{
    sfJoystickX, ///< The X axis
    sfJoystickY, ///< The Y axis
    sfJoystickZ, ///< The Z axis
    sfJoystickR, ///< The R axis
    sfJoystickU, ///< The U axis
    sfJoystickV, ///< The V axis
    sfJoystickPovX, ///< The X axis of the point-of-view hat
    sfJoystickPovY ///< The Y axis of the point-of-view hat
} sfJoystickAxis;
typedef enum
{
    sfKeyUnknown = -1, ///< Unhandled key
    sfKeyA, ///< The A key
    sfKeyB, ///< The B key
    sfKeyC, ///< The C key
    sfKeyD, ///< The D key
    sfKeyE, ///< The E key
    sfKeyF, ///< The F key
    sfKeyG, ///< The G key
    sfKeyH, ///< The H key
    sfKeyI, ///< The I key
    sfKeyJ, ///< The J key
    sfKeyK, ///< The K key
    sfKeyL, ///< The L key
    sfKeyM, ///< The M key
    sfKeyN, ///< The N key
    sfKeyO, ///< The O key
    sfKeyP, ///< The P key
    sfKeyQ, ///< The Q key
    sfKeyR, ///< The R key
    sfKeyS, ///< The S key
    sfKeyT, ///< The T key
    sfKeyU, ///< The U key
    sfKeyV, ///< The V key
    sfKeyW, ///< The W key
    sfKeyX, ///< The X key
    sfKeyY, ///< The Y key
    sfKeyZ, ///< The Z key
    sfKeyNum0, ///< The 0 key
    sfKeyNum1, ///< The 1 key
    sfKeyNum2, ///< The 2 key
    sfKeyNum3, ///< The 3 key
    sfKeyNum4, ///< The 4 key
    sfKeyNum5, ///< The 5 key
    sfKeyNum6, ///< The 6 key
    sfKeyNum7, ///< The 7 key
    sfKeyNum8, ///< The 8 key
    sfKeyNum9, ///< The 9 key
    sfKeyEscape, ///< The Escape key
    sfKeyLControl, ///< The left Control key
    sfKeyLShift, ///< The left Shift key
    sfKeyLAlt, ///< The left Alt key
    sfKeyLSystem, ///< The left OS specific key: window (Windows and Linux), apple (MacOS X), ...
    sfKeyRControl, ///< The right Control key
    sfKeyRShift, ///< The right Shift key
    sfKeyRAlt, ///< The right Alt key
    sfKeyRSystem, ///< The right OS specific key: window (Windows and Linux), apple (MacOS X), ...
    sfKeyMenu, ///< The Menu key
    sfKeyLBracket, ///< The [ key
    sfKeyRBracket, ///< The ] key
    sfKeySemicolon, ///< The ; key
    sfKeyComma, ///< The , key
    sfKeyPeriod, ///< The . key
    sfKeyQuote, ///< The ' key
    sfKeySlash, ///< The / key
    sfKeyBackslash, ///< The \ key
    sfKeyTilde, ///< The ~ key
    sfKeyEqual, ///< The = key
    sfKeyHyphen, ///< The - key (hyphen)
    sfKeySpace, ///< The Space key
    sfKeyEnter, ///< The Enter/Return key
    sfKeyBackspace, ///< The Backspace key
    sfKeyTab, ///< The Tabulation key
    sfKeyPageUp, ///< The Page up key
    sfKeyPageDown, ///< The Page down key
    sfKeyEnd, ///< The End key
    sfKeyHome, ///< The Home key
    sfKeyInsert, ///< The Insert key
    sfKeyDelete, ///< The Delete key
    sfKeyAdd, ///< The + key
    sfKeySubtract, ///< The - key (minus, usually from numpad)
    sfKeyMultiply, ///< The * key
    sfKeyDivide, ///< The / key
    sfKeyLeft, ///< Left arrow
    sfKeyRight, ///< Right arrow
    sfKeyUp, ///< Up arrow
    sfKeyDown, ///< Down arrow
    sfKeyNumpad0, ///< The numpad 0 key
    sfKeyNumpad1, ///< The numpad 1 key
    sfKeyNumpad2, ///< The numpad 2 key
    sfKeyNumpad3, ///< The numpad 3 key
    sfKeyNumpad4, ///< The numpad 4 key
    sfKeyNumpad5, ///< The numpad 5 key
    sfKeyNumpad6, ///< The numpad 6 key
    sfKeyNumpad7, ///< The numpad 7 key
    sfKeyNumpad8, ///< The numpad 8 key
    sfKeyNumpad9, ///< The numpad 9 key
    sfKeyF1, ///< The F1 key
    sfKeyF2, ///< The F2 key
    sfKeyF3, ///< The F3 key
    sfKeyF4, ///< The F4 key
    sfKeyF5, ///< The F5 key
    sfKeyF6, ///< The F6 key
    sfKeyF7, ///< The F7 key
    sfKeyF8, ///< The F8 key
    sfKeyF9, ///< The F8 key
    sfKeyF10, ///< The F10 key
    sfKeyF11, ///< The F11 key
    sfKeyF12, ///< The F12 key
    sfKeyF13, ///< The F13 key
    sfKeyF14, ///< The F14 key
    sfKeyF15, ///< The F15 key
    sfKeyPause, ///< The Pause key
    sfKeyCount, ///< Keep last -- the total number of keyboard keys
    // Deprecated values:
    sfKeyDash = sfKeyHyphen, ///< \deprecated Use Hyphen instead
    sfKeyBack = sfKeyBackspace, ///< \deprecated Use Backspace instead
    sfKeyBackSlash = sfKeyBackslash, ///< \deprecated Use Backslash instead
    sfKeySemiColon = sfKeySemicolon, ///< \deprecated Use Semicolon instead
    sfKeyReturn = sfKeyEnter ///< \deprecated Use Enter instead
} sfKeyCode;
typedef enum
{
    sfMouseLeft, ///< The left mouse button
    sfMouseRight, ///< The right mouse button
    sfMouseMiddle, ///< The middle (wheel) mouse button
    sfMouseXButton1, ///< The first extra mouse button
    sfMouseXButton2, ///< The second extra mouse button
    sfMouseButtonCount ///< Keep last -- the total number of mouse buttons
} sfMouseButton;
typedef enum
{
    sfMouseVerticalWheel, ///< The vertical mouse wheel
    sfMouseHorizontalWheel ///< The horizontal mouse wheel
} sfMouseWheel;
typedef enum
{
    sfSensorAccelerometer, ///< Measures the raw acceleration (m/s^2)
    sfSensorGyroscope, ///< Measures the raw rotation rates (degrees/s)
    sfSensorMagnetometer, ///< Measures the ambient magnetic field (micro-teslas)
    sfSensorGravity, ///< Measures the direction and intensity of gravity, independent of device acceleration (m/s^2)
    sfSensorUserAcceleration, ///< Measures the direction and intensity of device acceleration, independent of the gravity (m/s^2)
    sfSensorOrientation, ///< Measures the absolute 3D orientation (degrees)
    sfSensorCount ///< Keep last -- the total number of sensor types
} sfSensorType;
typedef enum
{
    sfEvtClosed, ///< The window requested to be closed (no data)
    sfEvtResized, ///< The window was resized (data in event.size)
    sfEvtLostFocus, ///< The window lost the focus (no data)
    sfEvtGainedFocus, ///< The window gained the focus (no data)
    sfEvtTextEntered, ///< A character was entered (data in event.text)
    sfEvtKeyPressed, ///< A key was pressed (data in event.key)
    sfEvtKeyReleased, ///< A key was released (data in event.key)
    sfEvtMouseWheelMoved, ///< The mouse wheel was scrolled (data in event.mouseWheel) (deprecated)
    sfEvtMouseWheelScrolled, ///< The mouse wheel was scrolled (data in event.mouseWheelScroll)
    sfEvtMouseButtonPressed, ///< A mouse button was pressed (data in event.mouseButton)
    sfEvtMouseButtonReleased, ///< A mouse button was released (data in event.mouseButton)
    sfEvtMouseMoved, ///< The mouse cursor moved (data in event.mouseMove)
    sfEvtMouseEntered, ///< The mouse cursor entered the area of the window (no data)
    sfEvtMouseLeft, ///< The mouse cursor left the area of the window (no data)
    sfEvtJoystickButtonPressed, ///< A joystick button was pressed (data in event.joystickButton)
    sfEvtJoystickButtonReleased, ///< A joystick button was released (data in event.joystickButton)
    sfEvtJoystickMoved, ///< The joystick moved along an axis (data in event.joystickMove)
    sfEvtJoystickConnected, ///< A joystick was connected (data in event.joystickConnect)
    sfEvtJoystickDisconnected, ///< A joystick was disconnected (data in event.joystickConnect)
    sfEvtTouchBegan, ///< A touch event began (data in event.touch)
    sfEvtTouchMoved, ///< A touch moved (data in event.touch)
    sfEvtTouchEnded, ///< A touch event ended (data in event.touch)
    sfEvtSensorChanged, ///< A sensor value changed (data in event.sensor)
    sfEvtCount, ///< Keep last -- the total number of event types
} sfEventType;
typedef struct
{
    sfEventType type;
    sfKeyCode code;
    sfBool alt;
    sfBool control;
    sfBool shift;
    sfBool system;
} sfKeyEvent;
typedef struct
{
    sfEventType type;
    sfUint32 unicode;
} sfTextEvent;
typedef struct
{
    sfEventType type;
    int x;
    int y;
} sfMouseMoveEvent;
typedef struct
{
    sfEventType type;
    sfMouseButton button;
    int x;
    int y;
} sfMouseButtonEvent;
typedef struct
{
    sfEventType type;
    int delta;
    int x;
    int y;
} sfMouseWheelEvent;
typedef struct
{
    sfEventType type;
    sfMouseWheel wheel;
    float delta;
    int x;
    int y;
} sfMouseWheelScrollEvent;
typedef struct
{
    sfEventType type;
    unsigned int joystickId;
    sfJoystickAxis axis;
    float position;
} sfJoystickMoveEvent;
typedef struct
{
    sfEventType type;
    unsigned int joystickId;
    unsigned int button;
} sfJoystickButtonEvent;
typedef struct
{
    sfEventType type;
    unsigned int joystickId;
} sfJoystickConnectEvent;
typedef struct
{
    sfEventType type;
    unsigned int width;
    unsigned int height;
} sfSizeEvent;
typedef struct
{
    sfEventType type;
    unsigned int finger;
    int x;
    int y;
} sfTouchEvent;
typedef struct
{
    sfEventType type;
    sfSensorType sensorType;
    float x;
    float y;
    float z;
} sfSensorEvent;
typedef union
{
    sfEventType type; ///< Type of the event
    sfSizeEvent size; ///< Size event parameters
    sfKeyEvent key; ///< Key event parameters
    sfTextEvent text; ///< Text event parameters
    sfMouseMoveEvent mouseMove; ///< Mouse move event parameters
    sfMouseButtonEvent mouseButton; ///< Mouse button event parameters
    sfMouseWheelEvent mouseWheel; ///< Mouse wheel event parameters (deprecated)
    sfMouseWheelScrollEvent mouseWheelScroll; ///< Mouse wheel event parameters
    sfJoystickMoveEvent joystickMove; ///< Joystick move event parameters
    sfJoystickButtonEvent joystickButton; ///< Joystick button event parameters
    sfJoystickConnectEvent joystickConnect; ///< Joystick (dis)connect event parameters
    sfTouchEvent touch; ///< Touch events parameters
    sfSensorEvent sensor; ///< Sensor event parameters
} sfEvent;

typedef struct
{
    unsigned int width; ///< Video mode width, in pixels
    unsigned int height; ///< Video mode height, in pixels
    unsigned int bitsPerPixel; ///< Video mode pixel depth, in bits per pixels
} sfVideoMode;
typedef unsigned long sfWindowHandle;
typedef enum
{
    sfNone = 0, ///< No border / title bar (this flag and all others are mutually exclusive)
    sfTitlebar = 1 << 0, ///< Title bar + fixed border
    sfResize = 1 << 1, ///< Titlebar + resizable border + maximize button
    sfClose = 1 << 2, ///< Titlebar + close button
    sfFullscreen = 1 << 3, ///< Fullscreen mode (this flag and all others are mutually exclusive)
    sfDefaultStyle = sfTitlebar | sfResize | sfClose ///< Default window style
} sfWindowStyle;
typedef enum
{
    sfContextDefault = 0, ///< Non-debug, compatibility context (this and the core attribute are mutually exclusive)
    sfContextCore = 1 << 0, ///< Core attribute
    sfContextDebug = 1 << 2 ///< Debug attribute
} sfContextAttribute;
typedef struct
{
    unsigned int depthBits; ///< Bits of the depth buffer
    unsigned int stencilBits; ///< Bits of the stencil buffer
    unsigned int antialiasingLevel; ///< Level of antialiasing
    unsigned int majorVersion; ///< Major number of the context version to create
    unsigned int minorVersion; ///< Minor number of the context version to create
    sfUint32 attributeFlags; ///< The attribute flags to create the context with
    sfBool sRgbCapable; ///< Whether the context framebuffer is sRGB capable
} sfContextSettings;
typedef enum
{
    sfCursorArrow, ///< Arrow cursor (default)
    sfCursorArrowWait, ///< Busy arrow cursor
    sfCursorWait, ///< Busy cursor
    sfCursorText, ///< I-beam, cursor when hovering over a field allowing text entry
    sfCursorHand, ///< Pointing hand cursor
    sfCursorSizeHorizontal, ///< Horizontal double arrow cursor
    sfCursorSizeVertical, ///< Vertical double arrow cursor
    sfCursorSizeTopLeftBottomRight, ///< Double arrow cursor going from top-left to bottom-right
    sfCursorSizeBottomLeftTopRight, ///< Double arrow cursor going from bottom-left to top-right
    sfCursorSizeAll, ///< Combination of SizeHorizontal and SizeVertical
    sfCursorCross, ///< Crosshair cursor
    sfCursorHelp, ///< Help cursor
    sfCursorNotAllowed ///< Action not allowed cursor
} sfCursorType;
typedef enum
{
    sfBlendFactorZero, ///< (0, 0, 0, 0)
    sfBlendFactorOne, ///< (1, 1, 1, 1)
    sfBlendFactorSrcColor, ///< (src.r, src.g, src.b, src.a)
    sfBlendFactorOneMinusSrcColor, ///< (1, 1, 1, 1) - (src.r, src.g, src.b, src.a)
    sfBlendFactorDstColor, ///< (dst.r, dst.g, dst.b, dst.a)
    sfBlendFactorOneMinusDstColor, ///< (1, 1, 1, 1) - (dst.r, dst.g, dst.b, dst.a)
    sfBlendFactorSrcAlpha, ///< (src.a, src.a, src.a, src.a)
    sfBlendFactorOneMinusSrcAlpha, ///< (1, 1, 1, 1) - (src.a, src.a, src.a, src.a)
    sfBlendFactorDstAlpha, ///< (dst.a, dst.a, dst.a, dst.a)
    sfBlendFactorOneMinusDstAlpha ///< (1, 1, 1, 1) - (dst.a, dst.a, dst.a, dst.a)
} sfBlendFactor;
typedef enum
{
    sfBlendEquationAdd, ///< Pixel = Src * SrcFactor + Dst * DstFactor
    sfBlendEquationSubtract, ///< Pixel = Src * SrcFactor - Dst * DstFactor
    sfBlendEquationReverseSubtract ///< Pixel = Dst * DstFactor - Src * SrcFactor
} sfBlendEquation;
typedef struct
{
    sfBlendFactor colorSrcFactor; ///< Source blending factor for the color channels
    sfBlendFactor colorDstFactor; ///< Destination blending factor for the color channels
    sfBlendEquation colorEquation; ///< Blending equation for the color channels
    sfBlendFactor alphaSrcFactor; ///< Source blending factor for the alpha channel
    sfBlendFactor alphaDstFactor; ///< Destination blending factor for the alpha channel
    sfBlendEquation alphaEquation; ///< Blending equation for the alpha channel
} sfBlendMode;
extern const sfBlendMode sfBlendAlpha; ///< Blend source and dest according to dest alpha
extern const sfBlendMode sfBlendAdd; ///< Add source to dest
extern const sfBlendMode sfBlendMultiply; ///< Multiply source and dest
extern const sfBlendMode sfBlendNone; ///< Overwrite dest with source
typedef struct
{
    sfUint8 r;
    sfUint8 g;
    sfUint8 b;
    sfUint8 a;
} sfColor;
extern sfColor sfBlack; ///< Black predefined color
extern sfColor sfWhite; ///< White predefined color
extern sfColor sfRed; ///< Red predefined color
extern sfColor sfGreen; ///< Green predefined color
extern sfColor sfBlue; ///< Blue predefined color
extern sfColor sfYellow; ///< Yellow predefined color
extern sfColor sfMagenta; ///< Magenta predefined color
extern sfColor sfCyan; ///< Cyan predefined color
extern sfColor sfTransparent; ///< Transparent (black) predefined color
extern sfColor sfColor_fromRGB(sfUint8 red, sfUint8 green, sfUint8 blue);
extern sfColor sfColor_fromRGBA(sfUint8 red, sfUint8 green, sfUint8 blue, sfUint8 alpha);
extern sfColor sfColor_fromInteger(sfUint32 color);
extern sfUint32 sfColor_toInteger(sfColor color);
extern sfColor sfColor_add(sfColor color1, sfColor color2);
extern sfColor sfColor_subtract(sfColor color1, sfColor color2);
extern sfColor sfColor_modulate(sfColor color1, sfColor color2);
typedef struct
{
    float left;
    float top;
    float width;
    float height;
} sfFloatRect;
typedef struct
{
    int left;
    int top;
    int width;
    int height;
} sfIntRect;
extern sfBool sfFloatRect_contains(const sfFloatRect* rect, float x, float y);
extern sfBool sfIntRect_contains(const sfIntRect* rect, int x, int y);
extern sfBool sfFloatRect_intersects(const sfFloatRect* rect1, const sfFloatRect* rect2, sfFloatRect* intersection);
extern sfBool sfIntRect_intersects(const sfIntRect* rect1, const sfIntRect* rect2, sfIntRect* intersection);
typedef struct sfCircleShape sfCircleShape;
typedef struct sfConvexShape sfConvexShape;
typedef struct sfFont sfFont;
typedef struct sfImage sfImage;
typedef struct sfShader sfShader;
typedef struct sfRectangleShape sfRectangleShape;
typedef struct sfRenderTexture sfRenderTexture;
typedef struct sfRenderWindow sfRenderWindow;
typedef struct sfShape sfShape;
typedef struct sfSprite sfSprite;
typedef struct sfText sfText;
typedef struct sfTexture sfTexture;
typedef struct sfTransformable sfTransformable;
typedef struct sfVertexArray sfVertexArray;
typedef struct sfVertexBuffer sfVertexBuffer;
typedef struct sfView sfView;
typedef struct
{
    float matrix[9];
} sfTransform;
extern const sfTransform sfTransform_Identity;
extern sfTransform sfTransform_fromMatrix(float a00, float a01, float a02,
                                                      float a10, float a11, float a12,
                                                      float a20, float a21, float a22);
extern void sfTransform_getMatrix(const sfTransform* transform, float* matrix);
extern sfTransform sfTransform_getInverse(const sfTransform* transform);
extern sfVector2f sfTransform_transformPoint(const sfTransform* transform, sfVector2f point);
extern sfFloatRect sfTransform_transformRect(const sfTransform* transform, sfFloatRect rectangle);
extern void sfTransform_combine(sfTransform* transform, const sfTransform* other);
extern void sfTransform_translate(sfTransform* transform, float x, float y);
extern void sfTransform_rotate(sfTransform* transform, float angle);
extern void sfTransform_rotateWithCenter(sfTransform* transform, float angle, float centerX, float centerY);
extern void sfTransform_scale(sfTransform* transform, float scaleX, float scaleY);
extern void sfTransform_scaleWithCenter(sfTransform* transform, float scaleX, float scaleY, float centerX, float centerY);
extern sfBool sfTransform_equal(sfTransform* left, sfTransform* right);

extern sfCircleShape* sfCircleShape_create(void);
extern sfCircleShape* sfCircleShape_copy(const sfCircleShape* shape);
extern void sfCircleShape_destroy(sfCircleShape* shape);
extern void sfCircleShape_setPosition(sfCircleShape* shape, sfVector2f position);
extern void sfCircleShape_setRotation(sfCircleShape* shape, float angle);
extern void sfCircleShape_setScale(sfCircleShape* shape, sfVector2f scale);
extern void sfCircleShape_setOrigin(sfCircleShape* shape, sfVector2f origin);
extern sfVector2f sfCircleShape_getPosition(const sfCircleShape* shape);
extern float sfCircleShape_getRotation(const sfCircleShape* shape);
extern sfVector2f sfCircleShape_getScale(const sfCircleShape* shape);
extern sfVector2f sfCircleShape_getOrigin(const sfCircleShape* shape);
extern void sfCircleShape_move(sfCircleShape* shape, sfVector2f offset);
extern void sfCircleShape_rotate(sfCircleShape* shape, float angle);
extern void sfCircleShape_scale(sfCircleShape* shape, sfVector2f factors);
extern sfTransform sfCircleShape_getTransform(const sfCircleShape* shape);
extern sfTransform sfCircleShape_getInverseTransform(const sfCircleShape* shape);
extern void sfCircleShape_setTexture(sfCircleShape* shape, const sfTexture* texture, sfBool resetRect);
extern void sfCircleShape_setTextureRect(sfCircleShape* shape, sfIntRect rect);
extern void sfCircleShape_setFillColor(sfCircleShape* shape, sfColor color);
extern void sfCircleShape_setOutlineColor(sfCircleShape* shape, sfColor color);
extern void sfCircleShape_setOutlineThickness(sfCircleShape* shape, float thickness);
extern const sfTexture* sfCircleShape_getTexture(const sfCircleShape* shape);
extern sfIntRect sfCircleShape_getTextureRect(const sfCircleShape* shape);
extern sfColor sfCircleShape_getFillColor(const sfCircleShape* shape);
extern sfColor sfCircleShape_getOutlineColor(const sfCircleShape* shape);
extern float sfCircleShape_getOutlineThickness(const sfCircleShape* shape);
extern size_t sfCircleShape_getPointCount(const sfCircleShape* shape);
extern sfVector2f sfCircleShape_getPoint(const sfCircleShape* shape, size_t index);
extern void sfCircleShape_setRadius(sfCircleShape* shape, float radius);
extern float sfCircleShape_getRadius(const sfCircleShape* shape);
extern void sfCircleShape_setPointCount(sfCircleShape* shape, size_t count);
extern sfFloatRect sfCircleShape_getLocalBounds(const sfCircleShape* shape);
extern sfFloatRect sfCircleShape_getGlobalBounds(const sfCircleShape* shape);
extern sfConvexShape* sfConvexShape_create(void);
extern sfConvexShape* sfConvexShape_copy(const sfConvexShape* shape);
extern void sfConvexShape_destroy(sfConvexShape* shape);
extern void sfConvexShape_setPosition(sfConvexShape* shape, sfVector2f position);
extern void sfConvexShape_setRotation(sfConvexShape* shape, float angle);
extern void sfConvexShape_setScale(sfConvexShape* shape, sfVector2f scale);
extern void sfConvexShape_setOrigin(sfConvexShape* shape, sfVector2f origin);
extern sfVector2f sfConvexShape_getPosition(const sfConvexShape* shape);
extern float sfConvexShape_getRotation(const sfConvexShape* shape);
extern sfVector2f sfConvexShape_getScale(const sfConvexShape* shape);
extern sfVector2f sfConvexShape_getOrigin(const sfConvexShape* shape);
extern void sfConvexShape_move(sfConvexShape* shape, sfVector2f offset);
extern void sfConvexShape_rotate(sfConvexShape* shape, float angle);
extern void sfConvexShape_scale(sfConvexShape* shape, sfVector2f factors);
extern sfTransform sfConvexShape_getTransform(const sfConvexShape* shape);
extern sfTransform sfConvexShape_getInverseTransform(const sfConvexShape* shape);
extern void sfConvexShape_setTexture(sfConvexShape* shape, const sfTexture* texture, sfBool resetRect);
extern void sfConvexShape_setTextureRect(sfConvexShape* shape, sfIntRect rect);
extern void sfConvexShape_setFillColor(sfConvexShape* shape, sfColor color);
extern void sfConvexShape_setOutlineColor(sfConvexShape* shape, sfColor color);
extern void sfConvexShape_setOutlineThickness(sfConvexShape* shape, float thickness);
extern const sfTexture* sfConvexShape_getTexture(const sfConvexShape* shape);
extern sfIntRect sfConvexShape_getTextureRect(const sfConvexShape* shape);
extern sfColor sfConvexShape_getFillColor(const sfConvexShape* shape);
extern sfColor sfConvexShape_getOutlineColor(const sfConvexShape* shape);
extern float sfConvexShape_getOutlineThickness(const sfConvexShape* shape);
extern size_t sfConvexShape_getPointCount(const sfConvexShape* shape);
extern sfVector2f sfConvexShape_getPoint(const sfConvexShape* shape, size_t index);
extern void sfConvexShape_setPointCount(sfConvexShape* shape, size_t count);
extern void sfConvexShape_setPoint(sfConvexShape* shape, size_t index, sfVector2f point);
extern sfFloatRect sfConvexShape_getLocalBounds(const sfConvexShape* shape);
extern sfFloatRect sfConvexShape_getGlobalBounds(const sfConvexShape* shape);
typedef struct
{
    const char* family;
} sfFontInfo;
typedef struct
{
    float advance; ///< Offset to move horizontically to the next character
    sfFloatRect bounds; ///< Bounding rectangle of the glyph, in coordinates relative to the baseline
    sfIntRect textureRect; ///< Texture coordinates of the glyph inside the font's image
} sfGlyph;

extern sfFont* sfFont_createFromFile(const char* filename);
extern sfFont* sfFont_createFromMemory(const void* data, size_t sizeInBytes);
extern sfFont* sfFont_createFromStream(sfInputStream* stream);
extern sfFont* sfFont_copy(const sfFont* font);
extern void sfFont_destroy(sfFont* font);
extern sfGlyph sfFont_getGlyph(const sfFont* font, sfUint32 codePoint, unsigned int characterSize, sfBool bold, float outlineThickness);
extern float sfFont_getKerning(const sfFont* font, sfUint32 first, sfUint32 second, unsigned int characterSize);
extern float sfFont_getLineSpacing(const sfFont* font, unsigned int characterSize);
extern float sfFont_getUnderlinePosition(const sfFont* font, unsigned int characterSize);
extern float sfFont_getUnderlineThickness(const sfFont* font, unsigned int characterSize);
extern const sfTexture* sfFont_getTexture(sfFont* font, unsigned int characterSize);
extern sfFontInfo sfFont_getInfo(const sfFont* font);
extern sfImage* sfImage_create(unsigned int width, unsigned int height);
extern sfImage* sfImage_createFromColor(unsigned int width, unsigned int height, sfColor color);
extern sfImage* sfImage_createFromPixels(unsigned int width, unsigned int height, const sfUint8* pixels);
extern sfImage* sfImage_createFromFile(const char* filename);
extern sfImage* sfImage_createFromMemory(const void* data, size_t size);
extern sfImage* sfImage_createFromStream(sfInputStream* stream);
extern sfImage* sfImage_copy(const sfImage* image);
extern void sfImage_destroy(sfImage* image);
extern sfBool sfImage_saveToFile(const sfImage* image, const char* filename);
extern sfVector2u sfImage_getSize(const sfImage* image);
extern void sfImage_createMaskFromColor(sfImage* image, sfColor color, sfUint8 alpha);
extern void sfImage_copyImage(sfImage* image, const sfImage* source, unsigned int destX, unsigned int destY, sfIntRect sourceRect, sfBool applyAlpha);
extern void sfImage_setPixel(sfImage* image, unsigned int x, unsigned int y, sfColor color);
extern sfColor sfImage_getPixel(const sfImage* image, unsigned int x, unsigned int y);
extern const sfUint8* sfImage_getPixelsPtr(const sfImage* image);
extern void sfImage_flipHorizontally(sfImage* image);
extern void sfImage_flipVertically(sfImage* image);
typedef enum
{
    sfPoints, ///< List of individual points
    sfLines, ///< List of individual lines
    sfLineStrip, ///< List of connected lines, a point uses the previous point to form a line
    sfTriangles, ///< List of individual triangles
    sfTriangleStrip, ///< List of connected triangles, a point uses the two previous points to form a triangle
    sfTriangleFan, ///< List of connected triangles, a point uses the common center and the previous point to form a triangle
    sfQuads, ///< List of individual quads
    sfLinesStrip = sfLineStrip, ///< \deprecated Use sfLineStrip instead
    sfTrianglesStrip = sfTriangleStrip, ///< \deprecated Use sfTriangleStrip instead
    sfTrianglesFan = sfTriangleFan ///< \deprecated Use sfTriangleFan instead
} sfPrimitiveType;
extern sfRectangleShape* sfRectangleShape_create(void);
extern sfRectangleShape* sfRectangleShape_copy(const sfRectangleShape* shape);
extern void sfRectangleShape_destroy(sfRectangleShape* shape);
extern void sfRectangleShape_setPosition(sfRectangleShape* shape, sfVector2f position);
extern void sfRectangleShape_setRotation(sfRectangleShape* shape, float angle);
extern void sfRectangleShape_setScale(sfRectangleShape* shape, sfVector2f scale);
extern void sfRectangleShape_setOrigin(sfRectangleShape* shape, sfVector2f origin);
extern sfVector2f sfRectangleShape_getPosition(const sfRectangleShape* shape);
extern float sfRectangleShape_getRotation(const sfRectangleShape* shape);
extern sfVector2f sfRectangleShape_getScale(const sfRectangleShape* shape);
extern sfVector2f sfRectangleShape_getOrigin(const sfRectangleShape* shape);
extern void sfRectangleShape_move(sfRectangleShape* shape, sfVector2f offset);
extern void sfRectangleShape_rotate(sfRectangleShape* shape, float angle);
extern void sfRectangleShape_scale(sfRectangleShape* shape, sfVector2f factors);
extern sfTransform sfRectangleShape_getTransform(const sfRectangleShape* shape);
extern sfTransform sfRectangleShape_getInverseTransform(const sfRectangleShape* shape);
extern void sfRectangleShape_setTexture(sfRectangleShape* shape, const sfTexture* texture, sfBool resetRect);
extern void sfRectangleShape_setTextureRect(sfRectangleShape* shape, sfIntRect rect);
extern void sfRectangleShape_setFillColor(sfRectangleShape* shape, sfColor color);
extern void sfRectangleShape_setOutlineColor(sfRectangleShape* shape, sfColor color);
extern void sfRectangleShape_setOutlineThickness(sfRectangleShape* shape, float thickness);
extern const sfTexture* sfRectangleShape_getTexture(const sfRectangleShape* shape);
extern sfIntRect sfRectangleShape_getTextureRect(const sfRectangleShape* shape);
extern sfColor sfRectangleShape_getFillColor(const sfRectangleShape* shape);
extern sfColor sfRectangleShape_getOutlineColor(const sfRectangleShape* shape);
extern float sfRectangleShape_getOutlineThickness(const sfRectangleShape* shape);
extern size_t sfRectangleShape_getPointCount(const sfRectangleShape* shape);
extern sfVector2f sfRectangleShape_getPoint(const sfRectangleShape* shape, size_t index);
extern void sfRectangleShape_setSize(sfRectangleShape* shape, sfVector2f size);
extern sfVector2f sfRectangleShape_getSize(const sfRectangleShape* shape);
extern sfFloatRect sfRectangleShape_getLocalBounds(const sfRectangleShape* shape);
extern sfFloatRect sfRectangleShape_getGlobalBounds(const sfRectangleShape* shape);
typedef struct
{
    sfBlendMode blendMode; ///< Blending mode
    sfTransform transform; ///< Transform
    const sfTexture* texture; ///< Texture
    const sfShader* shader; ///< Shader
} sfRenderStates;
extern sfRenderStates sfRenderStates_default();
typedef struct
{
    sfVector2f position; ///< Position of the vertex
    sfColor color; ///< Color of the vertex
    sfVector2f texCoords; ///< Coordinates of the texture's pixel to map to the vertex
} sfVertex;
extern sfRenderTexture* sfRenderTexture_create(unsigned int width, unsigned int height, sfBool depthBuffer);
extern sfRenderTexture* sfRenderTexture_createWithSettings(unsigned int width, unsigned int height, const sfContextSettings* settings);
extern void sfRenderTexture_destroy(sfRenderTexture* renderTexture);
extern sfVector2u sfRenderTexture_getSize(const sfRenderTexture* renderTexture);
extern sfBool sfRenderTexture_setActive(sfRenderTexture* renderTexture, sfBool active);
extern void sfRenderTexture_display(sfRenderTexture* renderTexture);
extern void sfRenderTexture_clear(sfRenderTexture* renderTexture, sfColor color);
extern void sfRenderTexture_setView(sfRenderTexture* renderTexture, const sfView* view);
extern const sfView* sfRenderTexture_getView(const sfRenderTexture* renderTexture);
extern const sfView* sfRenderTexture_getDefaultView(const sfRenderTexture* renderTexture);
extern sfIntRect sfRenderTexture_getViewport(const sfRenderTexture* renderTexture, const sfView* view);
extern sfVector2f sfRenderTexture_mapPixelToCoords(const sfRenderTexture* renderTexture, sfVector2i point, const sfView* view);
extern sfVector2i sfRenderTexture_mapCoordsToPixel(const sfRenderTexture* renderTexture, sfVector2f point, const sfView* view);
extern void sfRenderTexture_drawSprite(sfRenderTexture* renderTexture, const sfSprite* object, const sfRenderStates* states);
extern void sfRenderTexture_drawText(sfRenderTexture* renderTexture, const sfText* object, const sfRenderStates* states);
extern void sfRenderTexture_drawShape(sfRenderTexture* renderTexture, const sfShape* object, const sfRenderStates* states);
extern void sfRenderTexture_drawCircleShape(sfRenderTexture* renderTexture, const sfCircleShape* object, const sfRenderStates* states);
extern void sfRenderTexture_drawConvexShape(sfRenderTexture* renderTexture, const sfConvexShape* object, const sfRenderStates* states);
extern void sfRenderTexture_drawRectangleShape(sfRenderTexture* renderTexture, const sfRectangleShape* object, const sfRenderStates* states);
extern void sfRenderTexture_drawVertexArray(sfRenderTexture* renderTexture, const sfVertexArray* object, const sfRenderStates* states);
extern void sfRenderTexture_drawVertexBuffer(sfRenderTexture* renderTexture, const sfVertexBuffer* object, const sfRenderStates* states);
extern void sfRenderTexture_drawVertexBufferRange(sfRenderTexture* renderTexture,
                                                              const sfVertexBuffer* object, size_t firstVertex,
                                                              size_t vertexCount, const sfRenderStates* states);
extern void sfRenderTexture_drawPrimitives(sfRenderTexture* renderTexture,
                                                       const sfVertex* vertices, size_t vertexCount,
                                                       sfPrimitiveType type, const sfRenderStates* states);
extern void sfRenderTexture_pushGLStates(sfRenderTexture* renderTexture);
extern void sfRenderTexture_popGLStates(sfRenderTexture* renderTexture);
extern void sfRenderTexture_resetGLStates(sfRenderTexture* renderTexture);
extern const sfTexture* sfRenderTexture_getTexture(const sfRenderTexture* renderTexture);
extern unsigned int sfRenderTexture_getMaximumAntialiasingLevel();
extern void sfRenderTexture_setSmooth(sfRenderTexture* renderTexture, sfBool smooth);
extern sfBool sfRenderTexture_isSmooth(const sfRenderTexture* renderTexture);
extern void sfRenderTexture_setRepeated(sfRenderTexture* renderTexture, sfBool repeated);
extern sfBool sfRenderTexture_isRepeated(const sfRenderTexture* renderTexture);
extern sfBool sfRenderTexture_generateMipmap(sfRenderTexture* renderTexture);
extern sfRenderWindow* sfRenderWindow_create(sfVideoMode mode, const char* title, sfUint32 style, const sfContextSettings* settings);
extern sfRenderWindow* sfRenderWindow_createUnicode(sfVideoMode mode, const sfUint32* title, sfUint32 style, const sfContextSettings* settings);
extern sfRenderWindow* sfRenderWindow_createFromHandle(sfWindowHandle handle, const sfContextSettings* settings);
extern void sfRenderWindow_destroy(sfRenderWindow* renderWindow);
extern void sfRenderWindow_close(sfRenderWindow* renderWindow);
extern sfBool sfRenderWindow_isOpen(const sfRenderWindow* renderWindow);
extern sfContextSettings sfRenderWindow_getSettings(const sfRenderWindow* renderWindow);
extern sfBool sfRenderWindow_pollEvent(sfRenderWindow* renderWindow, sfEvent* event);
extern sfBool sfRenderWindow_waitEvent(sfRenderWindow* renderWindow, sfEvent* event);
extern sfVector2i sfRenderWindow_getPosition(const sfRenderWindow* renderWindow);
extern void sfRenderWindow_setPosition(sfRenderWindow* renderWindow, sfVector2i position);
extern sfVector2u sfRenderWindow_getSize(const sfRenderWindow* renderWindow);
extern void sfRenderWindow_setSize(sfRenderWindow* renderWindow, sfVector2u size);
extern void sfRenderWindow_setTitle(sfRenderWindow* renderWindow, const char* title);
extern void sfRenderWindow_setUnicodeTitle(sfRenderWindow* renderWindow, const sfUint32* title);
extern void sfRenderWindow_setIcon(sfRenderWindow* renderWindow, unsigned int width, unsigned int height, const sfUint8* pixels);
extern void sfRenderWindow_setVisible(sfRenderWindow* renderWindow, sfBool visible);
extern void sfRenderWindow_setVerticalSyncEnabled(sfRenderWindow* renderWindow, sfBool enabled);
extern void sfRenderWindow_setMouseCursorVisible(sfRenderWindow* renderWindow, sfBool show);
extern void sfRenderWindow_setMouseCursorGrabbed(sfRenderWindow* renderWindow, sfBool grabbed);
extern void sfRenderWindow_setMouseCursor(sfRenderWindow* window, const sfCursor* cursor);
extern void sfRenderWindow_setKeyRepeatEnabled(sfRenderWindow* renderWindow, sfBool enabled);
extern void sfRenderWindow_setFramerateLimit(sfRenderWindow* renderWindow, unsigned int limit);
extern void sfRenderWindow_setJoystickThreshold(sfRenderWindow* renderWindow, float threshold);
extern sfBool sfRenderWindow_setActive(sfRenderWindow* renderWindow, sfBool active);
extern void sfRenderWindow_requestFocus(sfRenderWindow* renderWindow);
extern sfBool sfRenderWindow_hasFocus(const sfRenderWindow* renderWindow);
extern void sfRenderWindow_display(sfRenderWindow* renderWindow);
extern sfWindowHandle sfRenderWindow_getSystemHandle(const sfRenderWindow* renderWindow);
extern void sfRenderWindow_clear(sfRenderWindow* renderWindow, sfColor color);
extern void sfRenderWindow_setView(sfRenderWindow* renderWindow, const sfView* view);
extern const sfView* sfRenderWindow_getView(const sfRenderWindow* renderWindow);
extern const sfView* sfRenderWindow_getDefaultView(const sfRenderWindow* renderWindow);
extern sfIntRect sfRenderWindow_getViewport(const sfRenderWindow* renderWindow, const sfView* view);
extern sfVector2f sfRenderWindow_mapPixelToCoords(const sfRenderWindow* renderWindow, sfVector2i point, const sfView* view);
extern sfVector2i sfRenderWindow_mapCoordsToPixel(const sfRenderWindow* renderWindow, sfVector2f point, const sfView* view);
extern void sfRenderWindow_drawSprite(sfRenderWindow* renderWindow, const sfSprite* object, const sfRenderStates* states);
extern void sfRenderWindow_drawText(sfRenderWindow* renderWindow, const sfText* object, const sfRenderStates* states);
extern void sfRenderWindow_drawShape(sfRenderWindow* renderWindow, const sfShape* object, const sfRenderStates* states);
extern void sfRenderWindow_drawCircleShape(sfRenderWindow* renderWindow, const sfCircleShape* object, const sfRenderStates* states);
extern void sfRenderWindow_drawConvexShape(sfRenderWindow* renderWindow, const sfConvexShape* object, const sfRenderStates* states);
extern void sfRenderWindow_drawRectangleShape(sfRenderWindow* renderWindow, const sfRectangleShape* object, const sfRenderStates* states);
extern void sfRenderWindow_drawVertexArray(sfRenderWindow* renderWindow, const sfVertexArray* object, const sfRenderStates* states);
extern void sfRenderWindow_drawVertexBuffer(sfRenderWindow* renderWindow, const sfVertexBuffer* object, const sfRenderStates* states);
extern void sfRenderWindow_drawVertexBufferRange(sfRenderWindow* renderWindow,
                                                             const sfVertexBuffer* object, size_t firstVertex,
                                                             size_t vertexCount, const sfRenderStates* states);
extern void sfRenderWindow_drawPrimitives(sfRenderWindow* renderWindow,
                                                      const sfVertex* vertices, size_t vertexCount,
                                                      sfPrimitiveType type, const sfRenderStates* states);
extern void sfRenderWindow_pushGLStates(sfRenderWindow* renderWindow);
extern void sfRenderWindow_popGLStates(sfRenderWindow* renderWindow);
extern void sfRenderWindow_resetGLStates(sfRenderWindow* renderWindow);
extern sfImage* sfRenderWindow_capture(const sfRenderWindow* renderWindow);
extern sfVector2i sfMouse_getPositionRenderWindow(const sfRenderWindow* relativeTo);
extern void sfMouse_setPositionRenderWindow(sfVector2i position, const sfRenderWindow* relativeTo);
extern sfVector2i sfTouch_getPositionRenderWindow(unsigned int finger, const sfRenderWindow* relativeTo);
typedef sfVector2f sfGlslVec2;
typedef sfVector2i sfGlslIvec2;
typedef struct
{
    sfBool x;
    sfBool y;
} sfGlslBvec2;
typedef sfVector3f sfGlslVec3;
typedef struct
{
    int x;
    int y;
    int z;
} sfGlslIvec3;
typedef struct
{
    sfBool x;
    sfBool y;
    sfBool z;
} sfGlslBvec3;
typedef struct
{
    float x;
    float y;
    float z;
    float w;
} sfGlslVec4;
typedef struct
{
    int x;
    int y;
    int z;
    int w;
} sfGlslIvec4;
typedef struct
{
    sfBool x;
    sfBool y;
    sfBool z;
    sfBool w;
} sfGlslBvec4;
typedef struct
{
    float array[3 * 3];
} sfGlslMat3;
typedef struct
{
    float array[4 * 4];
} sfGlslMat4;
extern sfShader* sfShader_createFromFile(const char* vertexShaderFilename, const char* geometryShaderFilename, const char* fragmentShaderFilename);
extern sfShader* sfShader_createFromMemory(const char* vertexShader, const char* geometryShader, const char* fragmentShader);
extern sfShader* sfShader_createFromStream(sfInputStream* vertexShaderStream, sfInputStream* geometryShaderStream, sfInputStream* fragmentShaderStream);
extern void sfShader_destroy(sfShader* shader);
extern void sfShader_setFloatUniform(sfShader* shader, const char* name, float x);
extern void sfShader_setVec2Uniform(sfShader* shader, const char* name, sfGlslVec2 vector);
extern void sfShader_setVec3Uniform(sfShader* shader, const char* name, sfGlslVec3 vector);
extern void sfShader_setVec4Uniform(sfShader* shader, const char* name, sfGlslVec4 vector);
extern void sfShader_setColorUniform(sfShader* shader, const char* name, sfColor color);
extern void sfShader_setIntUniform(sfShader* shader, const char* name, int x);
extern void sfShader_setIvec2Uniform(sfShader* shader, const char* name, sfGlslIvec2 vector);
extern void sfShader_setIvec3Uniform(sfShader* shader, const char* name, sfGlslIvec3 vector);
extern void sfShader_setIvec4Uniform(sfShader* shader, const char* name, sfGlslIvec4 vector);
extern void sfShader_setIntColorUniform(sfShader* shader, const char* name, sfColor color);
extern void sfShader_setBoolUniform(sfShader* shader, const char* name, sfBool x);
extern void sfShader_setBvec2Uniform(sfShader* shader, const char* name, sfGlslBvec2 vector);
extern void sfShader_setBvec3Uniform(sfShader* shader, const char* name, sfGlslBvec3 vector);
extern void sfShader_setBvec4Uniform(sfShader* shader, const char* name, sfGlslBvec4 vector);
extern void sfShader_setMat3Uniform(sfShader* shader, const char* name, const sfGlslMat3* matrix);
extern void sfShader_setMat4Uniform(sfShader* shader, const char* name, const sfGlslMat4* matrix);
extern void sfShader_setTextureUniform(sfShader* shader, const char* name, const sfTexture* texture);
extern void sfShader_setCurrentTextureUniform(sfShader* shader, const char* name);
extern void sfShader_setFloatUniformArray(sfShader* shader, const char* name, const float* scalarArray, size_t length);
extern void sfShader_setVec2UniformArray(sfShader* shader, const char* name, const sfGlslVec2* vectorArray, size_t length);
extern void sfShader_setVec3UniformArray(sfShader* shader, const char* name, const sfGlslVec3* vectorArray, size_t length);
extern void sfShader_setVec4UniformArray(sfShader* shader, const char* name, const sfGlslVec4* vectorArray, size_t length);
extern void sfShader_setMat3UniformArray(sfShader* shader, const char* name, const sfGlslMat3* matrixArray, size_t length);
extern void sfShader_setMat4UniformArray(sfShader* shader, const char* name, const sfGlslMat4* matrixArray, size_t length);
extern void sfShader_setFloatParameter(sfShader* shader, const char* name, float x);
extern void sfShader_setFloat2Parameter(sfShader* shader, const char* name, float x, float y);
extern void sfShader_setFloat3Parameter(sfShader* shader, const char* name, float x, float y, float z);
extern void sfShader_setFloat4Parameter(sfShader* shader, const char* name, float x, float y, float z, float w);
extern void sfShader_setVector2Parameter(sfShader* shader, const char* name, sfVector2f vector);
extern void sfShader_setVector3Parameter(sfShader* shader, const char* name, sfVector3f vector);
extern void sfShader_setColorParameter(sfShader* shader, const char* name, sfColor color);
extern void sfShader_setTransformParameter(sfShader* shader, const char* name, sfTransform transform);
extern void sfShader_setTextureParameter(sfShader* shader, const char* name, const sfTexture* texture);
extern void sfShader_setCurrentTextureParameter(sfShader* shader, const char* name);
extern unsigned int sfShader_getNativeHandle(const sfShader* shader);
extern void sfShader_bind(const sfShader* shader);
extern sfBool sfShader_isAvailable(void);
extern sfBool sfShader_isGeometryAvailable(void);
typedef size_t (*sfShapeGetPointCountCallback)(void*); ///< Type of the callback used to get the number of points in a shape
typedef sfVector2f (*sfShapeGetPointCallback)(size_t, void*); ///< Type of the callback used to get a point of a shape
extern sfShape* sfShape_create(sfShapeGetPointCountCallback getPointCount,
                                           sfShapeGetPointCallback getPoint,
                                           void* userData);
extern void sfShape_destroy(sfShape* shape);
extern void sfShape_setPosition(sfShape* shape, sfVector2f position);
extern void sfShape_setRotation(sfShape* shape, float angle);
extern void sfShape_setScale(sfShape* shape, sfVector2f scale);
extern void sfShape_setOrigin(sfShape* shape, sfVector2f origin);
extern sfVector2f sfShape_getPosition(const sfShape* shape);
extern float sfShape_getRotation(const sfShape* shape);
extern sfVector2f sfShape_getScale(const sfShape* shape);
extern sfVector2f sfShape_getOrigin(const sfShape* shape);
extern void sfShape_move(sfShape* shape, sfVector2f offset);
extern void sfShape_rotate(sfShape* shape, float angle);
extern void sfShape_scale(sfShape* shape, sfVector2f factors);
extern sfTransform sfShape_getTransform(const sfShape* shape);
extern sfTransform sfShape_getInverseTransform(const sfShape* shape);
extern void sfShape_setTexture(sfShape* shape, const sfTexture* texture, sfBool resetRect);
extern void sfShape_setTextureRect(sfShape* shape, sfIntRect rect);
extern void sfShape_setFillColor(sfShape* shape, sfColor color);
extern void sfShape_setOutlineColor(sfShape* shape, sfColor color);
extern void sfShape_setOutlineThickness(sfShape* shape, float thickness);
extern const sfTexture* sfShape_getTexture(const sfShape* shape);
extern sfIntRect sfShape_getTextureRect(const sfShape* shape);
extern sfColor sfShape_getFillColor(const sfShape* shape);
extern sfColor sfShape_getOutlineColor(const sfShape* shape);
extern float sfShape_getOutlineThickness(const sfShape* shape);
extern size_t sfShape_getPointCount(const sfShape* shape);
extern sfVector2f sfShape_getPoint(const sfShape* shape, size_t index);
extern sfFloatRect sfShape_getLocalBounds(const sfShape* shape);
extern sfFloatRect sfShape_getGlobalBounds(const sfShape* shape);
extern void sfShape_update(sfShape* shape);
extern sfSprite* sfSprite_create(void);
extern sfSprite* sfSprite_copy(const sfSprite* sprite);
extern void sfSprite_destroy(sfSprite* sprite);
extern void sfSprite_setPosition(sfSprite* sprite, sfVector2f position);
extern void sfSprite_setRotation(sfSprite* sprite, float angle);
extern void sfSprite_setScale(sfSprite* sprite, sfVector2f scale);
extern void sfSprite_setOrigin(sfSprite* sprite, sfVector2f origin);
extern sfVector2f sfSprite_getPosition(const sfSprite* sprite);
extern float sfSprite_getRotation(const sfSprite* sprite);
extern sfVector2f sfSprite_getScale(const sfSprite* sprite);
extern sfVector2f sfSprite_getOrigin(const sfSprite* sprite);
extern void sfSprite_move(sfSprite* sprite, sfVector2f offset);
extern void sfSprite_rotate(sfSprite* sprite, float angle);
extern void sfSprite_scale(sfSprite* sprite, sfVector2f factors);
extern sfTransform sfSprite_getTransform(const sfSprite* sprite);
extern sfTransform sfSprite_getInverseTransform(const sfSprite* sprite);
extern void sfSprite_setTexture(sfSprite* sprite, const sfTexture* texture, sfBool resetRect);
extern void sfSprite_setTextureRect(sfSprite* sprite, sfIntRect rectangle);
extern void sfSprite_setColor(sfSprite* sprite, sfColor color);
extern const sfTexture* sfSprite_getTexture(const sfSprite* sprite);
extern sfIntRect sfSprite_getTextureRect(const sfSprite* sprite);
extern sfColor sfSprite_getColor(const sfSprite* sprite);
extern sfFloatRect sfSprite_getLocalBounds(const sfSprite* sprite);
extern sfFloatRect sfSprite_getGlobalBounds(const sfSprite* sprite);
typedef enum
{
    sfTextRegular = 0, ///< Regular characters, no style
    sfTextBold = 1 << 0, ///< Bold characters
    sfTextItalic = 1 << 1, ///< Italic characters
    sfTextUnderlined = 1 << 2, ///< Underlined characters
    sfTextStrikeThrough = 1 << 3 ///< Strike through characters
} sfTextStyle;
extern sfText* sfText_create(void);
extern sfText* sfText_copy(const sfText* text);
extern void sfText_destroy(sfText* text);
extern void sfText_setPosition(sfText* text, sfVector2f position);
extern void sfText_setRotation(sfText* text, float angle);
extern void sfText_setScale(sfText* text, sfVector2f scale);
extern void sfText_setOrigin(sfText* text, sfVector2f origin);
extern sfVector2f sfText_getPosition(const sfText* text);
extern float sfText_getRotation(const sfText* text);
extern sfVector2f sfText_getScale(const sfText* text);
extern sfVector2f sfText_getOrigin(const sfText* text);
extern void sfText_move(sfText* text, sfVector2f offset);
extern void sfText_rotate(sfText* text, float angle);
extern void sfText_scale(sfText* text, sfVector2f factors);
extern sfTransform sfText_getTransform(const sfText* text);
extern sfTransform sfText_getInverseTransform(const sfText* text);
extern void sfText_setString(sfText* text, const char* string);
extern void sfText_setUnicodeString(sfText* text, const sfUint32* string);
extern void sfText_setFont(sfText* text, const sfFont* font);
extern void sfText_setCharacterSize(sfText* text, unsigned int size);
    ////////////////////////////////////////////////////////////
extern void sfText_setLineSpacing(sfText* text, float spacingFactor);
extern void sfText_setLetterSpacing(sfText* text, float spacingFactor);
extern void sfText_setStyle(sfText* text, sfUint32 style);
extern void sfText_setColor(sfText* text, sfColor color);
extern void sfText_setFillColor(sfText* text, sfColor color);
extern void sfText_setOutlineColor(sfText* text, sfColor color);
extern void sfText_setOutlineThickness(sfText* text, float thickness);
extern const char* sfText_getString(const sfText* text);
extern const sfUint32* sfText_getUnicodeString(const sfText* text);
extern const sfFont* sfText_getFont(const sfText* text);
extern unsigned int sfText_getCharacterSize(const sfText* text);
extern float sfText_getLetterSpacing(const sfText* text);
extern float sfText_getLineSpacing(const sfText* text);
extern sfUint32 sfText_getStyle(const sfText* text);
extern sfColor sfText_getColor(const sfText* text);
extern sfColor sfText_getFillColor(const sfText* text);
extern sfColor sfText_getOutlineColor(const sfText* text);
extern float sfText_getOutlineThickness(const sfText* text);
extern sfVector2f sfText_findCharacterPos(const sfText* text, size_t index);
extern sfFloatRect sfText_getLocalBounds(const sfText* text);
extern sfFloatRect sfText_getGlobalBounds(const sfText* text);
typedef enum
{
    sfTextureNormalized, ///< sfTexture coordinates in range [0 .. 1].
    sfTexturePixels ///< sfTexture coordinates in range [0 .. size].
} sfTextureCoordinateType;
extern sfTexture* sfTexture_create(unsigned int width, unsigned int height);
extern sfTexture* sfTexture_createFromFile(const char* filename, const sfIntRect* area);
extern sfTexture* sfTexture_createSrgbFromFile(const char* filename, const sfIntRect* area);
extern sfTexture* sfTexture_createFromMemory(const void* data, size_t sizeInBytes, const sfIntRect* area);
extern sfTexture* sfTexture_createSrgbFromMemory(const void* data, size_t sizeInBytes, const sfIntRect* area);
extern sfTexture* sfTexture_createFromStream(sfInputStream* stream, const sfIntRect* area);
extern sfTexture* sfTexture_createSrgbFromStream(sfInputStream* stream, const sfIntRect* area);
extern sfTexture* sfTexture_createFromImage(const sfImage* image, const sfIntRect* area);
extern sfTexture* sfTexture_createSrgbFromImage(const sfImage* image, const sfIntRect* area);
extern sfTexture* sfTexture_copy(const sfTexture* texture);
extern void sfTexture_destroy(sfTexture* texture);
extern sfVector2u sfTexture_getSize(const sfTexture* texture);
extern sfImage* sfTexture_copyToImage(const sfTexture* texture);
extern void sfTexture_updateFromPixels(sfTexture* texture, const sfUint8* pixels, unsigned int width, unsigned int height, unsigned int x, unsigned int y);
extern void sfTexture_updateFromTexture(sfTexture* destination, const sfTexture* source, unsigned int x, unsigned int y);
extern void sfTexture_updateFromImage(sfTexture* texture, const sfImage* image, unsigned int x, unsigned int y);
extern void sfTexture_updateFromWindow(sfTexture* texture, const sfWindow* window, unsigned int x, unsigned int y);
extern void sfTexture_updateFromRenderWindow(sfTexture* texture, const sfRenderWindow* renderWindow, unsigned int x, unsigned int y);
extern void sfTexture_setSmooth(sfTexture* texture, sfBool smooth);
extern sfBool sfTexture_isSmooth(const sfTexture* texture);
extern sfBool sfTexture_isSrgb(const sfTexture* texture);
extern void sfTexture_setRepeated(sfTexture* texture, sfBool repeated);
extern sfBool sfTexture_isRepeated(const sfTexture* texture);
extern sfBool sfTexture_generateMipmap(sfTexture* texture);
extern void sfTexture_swap(sfTexture* left, sfTexture* right);
extern unsigned int sfTexture_getNativeHandle(const sfTexture* texture);
extern void sfTexture_bind(const sfTexture* texture, sfTextureCoordinateType type);
extern unsigned int sfTexture_getMaximumSize();
extern sfTransformable* sfTransformable_create(void);
extern sfTransformable* sfTransformable_copy(const sfTransformable* transformable);
extern void sfTransformable_destroy(sfTransformable* transformable);
extern void sfTransformable_setPosition(sfTransformable* transformable, sfVector2f position);
extern void sfTransformable_setRotation(sfTransformable* transformable, float angle);
extern void sfTransformable_setScale(sfTransformable* transformable, sfVector2f scale);
extern void sfTransformable_setOrigin(sfTransformable* transformable, sfVector2f origin);
extern sfVector2f sfTransformable_getPosition(const sfTransformable* transformable);
extern float sfTransformable_getRotation(const sfTransformable* transformable);
extern sfVector2f sfTransformable_getScale(const sfTransformable* transformable);
extern sfVector2f sfTransformable_getOrigin(const sfTransformable* transformable);
extern void sfTransformable_move(sfTransformable* transformable, sfVector2f offset);
extern void sfTransformable_rotate(sfTransformable* transformable, float angle);
extern void sfTransformable_scale(sfTransformable* transformable, sfVector2f factors);
extern sfTransform sfTransformable_getTransform(const sfTransformable* transformable);
extern sfTransform sfTransformable_getInverseTransform(const sfTransformable* transformable);
extern sfVertexArray* sfVertexArray_create(void);
extern sfVertexArray* sfVertexArray_copy(const sfVertexArray* vertexArray);
extern void sfVertexArray_destroy(sfVertexArray* vertexArray);
extern size_t sfVertexArray_getVertexCount(const sfVertexArray* vertexArray);
extern sfVertex* sfVertexArray_getVertex(sfVertexArray* vertexArray, size_t index);
extern void sfVertexArray_clear(sfVertexArray* vertexArray);
extern void sfVertexArray_resize(sfVertexArray* vertexArray, size_t vertexCount);
extern void sfVertexArray_append(sfVertexArray* vertexArray, sfVertex vertex);
extern void sfVertexArray_setPrimitiveType(sfVertexArray* vertexArray, sfPrimitiveType type);
extern sfPrimitiveType sfVertexArray_getPrimitiveType(sfVertexArray* vertexArray);
extern sfFloatRect sfVertexArray_getBounds(sfVertexArray* vertexArray);
typedef enum
{
    sfVertexBufferStream, ///< Constantly changing data
    sfVertexBufferDynamic, ///< Occasionally changing data
    sfVertexBufferStatic ///< Rarely changing data
} sfVertexBufferUsage;
extern sfVertexBuffer* sfVertexBuffer_create(unsigned int vertexCount, sfPrimitiveType type, sfVertexBufferUsage usage);
extern sfVertexBuffer* sfVertexBuffer_copy(const sfVertexBuffer* vertexBuffer);
extern void sfVertexBuffer_destroy(sfVertexBuffer* vertexBuffer);
extern unsigned int sfVertexBuffer_getVertexCount(const sfVertexBuffer* vertexBuffer);
extern sfBool sfVertexBuffer_update(sfVertexBuffer* vertexBuffer, const sfVertex* vertices, unsigned int vertexCount, unsigned int offset);
extern sfBool sfVertexBuffer_updateFromVertexBuffer(sfVertexBuffer* vertexBuffer, const sfVertexBuffer* other);
extern void sfVertexBuffer_swap(sfVertexBuffer* left, sfVertexBuffer* right);
extern unsigned int sfVertexBuffer_getNativeHandle(sfVertexBuffer* vertexBuffer);
extern void sfVertexBuffer_setPrimitiveType(sfVertexBuffer* vertexBuffer, sfPrimitiveType type);
extern sfPrimitiveType sfVertexBuffer_getPrimitiveType(const sfVertexBuffer* vertexBuffer);
extern void sfVertexBuffer_setUsage(sfVertexBuffer* vertexBuffer, sfVertexBufferUsage usage);
extern sfVertexBufferUsage sfVertexBuffer_getUsage(const sfVertexBuffer* vertexBuffer);
extern void sfVertexBuffer_bind(const sfVertexBuffer* vertexBuffer);
extern sfBool sfVertexBuffer_isAvailable();
extern sfView* sfView_create(void);
extern sfView* sfView_createFromRect(sfFloatRect rectangle);
extern sfView* sfView_copy(const sfView* view);
extern void sfView_destroy(sfView* view);
extern void sfView_setCenter(sfView* view, sfVector2f center);
extern void sfView_setSize(sfView* view, sfVector2f size);
extern void sfView_setRotation(sfView* view, float angle);
extern void sfView_setViewport(sfView* view, sfFloatRect viewport);
extern void sfView_reset(sfView* view, sfFloatRect rectangle);
extern sfVector2f sfView_getCenter(const sfView* view);
extern sfVector2f sfView_getSize(const sfView* view);
extern float sfView_getRotation(const sfView* view);
extern sfFloatRect sfView_getViewport(const sfView* view);
extern void sfView_move(sfView* view, sfVector2f offset);
extern void sfView_rotate(sfView* view, float angle);
extern void sfView_zoom(sfView* view, float factor);
