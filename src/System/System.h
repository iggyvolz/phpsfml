////////////////////////////////////////////////////////////
//
// SFML - Simple and Fast Multimedia Library
// Copyright (C) 2007-2023 Laurent Gomila (laurent@sfml-dev.org)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////

// This file is generated by the command (thanks https://www.php.net/manual/en/ffi.load.php#125128):
// `cpp -P -C -D "__attribute__(ARGS)=" -I. SFML/System.h` then removing comments
// This is done to remove all the "junk" that FFI can't process
typedef int sfBool;
typedef signed char sfInt8;
typedef unsigned char sfUint8;
typedef signed short sfInt16;
typedef unsigned short sfUint16;
typedef signed int sfInt32;
typedef unsigned int sfUint32;
typedef signed long long sfInt64;
typedef unsigned long long sfUint64;
typedef struct
{
    sfInt64 microseconds;
} sfTime;
extern sfTime sfTime_Zero;
extern float sfTime_asSeconds(sfTime time);
extern sfInt32 sfTime_asMilliseconds(sfTime time);
extern sfInt64 sfTime_asMicroseconds(sfTime time);
extern sfTime sfSeconds(float amount);
extern sfTime sfMilliseconds(sfInt32 amount);
extern sfTime sfMicroseconds(sfInt64 amount);
typedef struct sfClock sfClock;
typedef struct sfMutex sfMutex;
typedef struct sfThread sfThread;
extern sfClock* sfClock_create(void);
extern sfClock* sfClock_copy(const sfClock* clock);
extern void sfClock_destroy(sfClock* clock);
extern sfTime sfClock_getElapsedTime(const sfClock* clock);
extern sfTime sfClock_restart(sfClock* clock);
typedef sfInt64 (*sfInputStreamReadFunc)(void* data, sfInt64 size, void* userData);
typedef sfInt64 (*sfInputStreamSeekFunc)(sfInt64 position, void* userData);
typedef sfInt64 (*sfInputStreamTellFunc)(void* userData);
typedef sfInt64 (*sfInputStreamGetSizeFunc)(void* userData);
typedef struct sfInputStream
{
    sfInputStreamReadFunc read;
    sfInputStreamSeekFunc seek;
    sfInputStreamTellFunc tell;
    sfInputStreamGetSizeFunc getSize;
    void* userData;
} sfInputStream;
extern sfMutex* sfMutex_create(void);
extern void sfMutex_destroy(sfMutex* mutex);
extern void sfMutex_lock(sfMutex* mutex);
extern void sfMutex_unlock(sfMutex* mutex);
extern void sfSleep(sfTime duration);
extern sfThread* sfThread_create(void (*function)(void*), void* userData);
extern void sfThread_destroy(sfThread* thread);
extern void sfThread_launch(sfThread* thread);
extern void sfThread_wait(sfThread* thread);
extern void sfThread_terminate(sfThread* thread);
typedef struct
{
    int x;
    int y;
} sfVector2i;
typedef struct
{
    unsigned int x;
    unsigned int y;
} sfVector2u;
typedef struct
{
    float x;
    float y;
} sfVector2f;
typedef struct
{
    float x;
    float y;
    float z;
} sfVector3f;
