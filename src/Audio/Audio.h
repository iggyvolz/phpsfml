////////////////////////////////////////////////////////////
//
// SFML - Simple and Fast Multimedia Library
// Copyright (C) 2007-2023 Laurent Gomila (laurent@sfml-dev.org)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////

// This file is generated by the command (thanks https://www.php.net/manual/en/ffi.load.php#125128):
// `cpp -P -C -D "__attribute__(ARGS)=" -I. SFML/Audio.h` then removing comments and declarations from other libraries
// This is done to remove all the "junk" that FFI can't process

typedef int sfBool;
typedef signed char sfInt8;
typedef unsigned char sfUint8;
typedef signed short sfInt16;
typedef unsigned short sfUint16;
typedef signed int sfInt32;
typedef unsigned int sfUint32;
    typedef signed long long sfInt64;
    typedef unsigned long long sfUint64;
typedef struct
{
    sfInt64 microseconds;
} sfTime;
typedef struct sfClock sfClock;
typedef struct sfMutex sfMutex;
typedef struct sfThread sfThread;
typedef sfInt64 (*sfInputStreamReadFunc)(void* data, sfInt64 size, void* userData);
typedef sfInt64 (*sfInputStreamSeekFunc)(sfInt64 position, void* userData);
typedef sfInt64 (*sfInputStreamTellFunc)(void* userData);
typedef sfInt64 (*sfInputStreamGetSizeFunc)(void* userData);
typedef struct sfInputStream
{
    sfInputStreamReadFunc read; ///< Function to read data from the stream
    sfInputStreamSeekFunc seek; ///< Function to set the current read position
    sfInputStreamTellFunc tell; ///< Function to get the current read position
    sfInputStreamGetSizeFunc getSize; ///< Function to get the total number of bytes in the stream
    void* userData; ///< User data that will be passed to the callbacks
} sfInputStream;
typedef struct
{
    int x;
    int y;
} sfVector2i;
typedef struct
{
    unsigned int x;
    unsigned int y;
} sfVector2u;
typedef struct
{
    float x;
    float y;
} sfVector2f;
typedef struct
{
    float x;
    float y;
    float z;
} sfVector3f;
extern void sfListener_setGlobalVolume(float volume);
extern float sfListener_getGlobalVolume(void);
extern void sfListener_setPosition(sfVector3f position);
extern sfVector3f sfListener_getPosition();
extern void sfListener_setDirection(sfVector3f direction);
extern sfVector3f sfListener_getDirection();
extern void sfListener_setUpVector(sfVector3f upVector);
extern sfVector3f sfListener_getUpVector();
typedef enum
{
    sfStopped, ///< Sound / music is not playing
    sfPaused, ///< Sound / music is paused
    sfPlaying ///< Sound / music is playing
} sfSoundStatus;
typedef struct sfMusic sfMusic;
typedef struct sfSound sfSound;
typedef struct sfSoundBuffer sfSoundBuffer;
typedef struct sfSoundBufferRecorder sfSoundBufferRecorder;
typedef struct sfSoundRecorder sfSoundRecorder;
typedef struct sfSoundStream sfSoundStream;
typedef struct
{
    sfTime offset; ///< The beginning offset of the time range
    sfTime length; ///< The length of the time range
} sfTimeSpan;
extern sfMusic* sfMusic_createFromFile(const char* filename);
extern sfMusic* sfMusic_createFromMemory(const void* data, size_t sizeInBytes);
extern sfMusic* sfMusic_createFromStream(sfInputStream* stream);
extern void sfMusic_destroy(sfMusic* music);
extern void sfMusic_setLoop(sfMusic* music, sfBool loop);
extern sfBool sfMusic_getLoop(const sfMusic* music);
extern sfTime sfMusic_getDuration(const sfMusic* music);
extern sfTimeSpan sfMusic_getLoopPoints(const sfMusic* music);
extern void sfMusic_setLoopPoints(sfMusic* music, sfTimeSpan timePoints);
extern void sfMusic_play(sfMusic* music);
extern void sfMusic_pause(sfMusic* music);
extern void sfMusic_stop(sfMusic* music);
extern unsigned int sfMusic_getChannelCount(const sfMusic* music);
extern unsigned int sfMusic_getSampleRate(const sfMusic* music);
extern sfSoundStatus sfMusic_getStatus(const sfMusic* music);
extern sfTime sfMusic_getPlayingOffset(const sfMusic* music);
extern void sfMusic_setPitch(sfMusic* music, float pitch);
extern void sfMusic_setVolume(sfMusic* music, float volume);
extern void sfMusic_setPosition(sfMusic* music, sfVector3f position);
extern void sfMusic_setRelativeToListener(sfMusic* music, sfBool relative);
extern void sfMusic_setMinDistance(sfMusic* music, float distance);
extern void sfMusic_setAttenuation(sfMusic* music, float attenuation);
extern void sfMusic_setPlayingOffset(sfMusic* music, sfTime timeOffset);
extern float sfMusic_getPitch(const sfMusic* music);
extern float sfMusic_getVolume(const sfMusic* music);
extern sfVector3f sfMusic_getPosition(const sfMusic* music);
extern sfBool sfMusic_isRelativeToListener(const sfMusic* music);
extern float sfMusic_getMinDistance(const sfMusic* music);
extern float sfMusic_getAttenuation(const sfMusic* music);
extern sfSound* sfSound_create(void);
extern sfSound* sfSound_copy(const sfSound* sound);
extern void sfSound_destroy(sfSound* sound);
extern void sfSound_play(sfSound* sound);
extern void sfSound_pause(sfSound* sound);
extern void sfSound_stop(sfSound* sound);
extern void sfSound_setBuffer(sfSound* sound, const sfSoundBuffer* buffer);
extern const sfSoundBuffer* sfSound_getBuffer(const sfSound* sound);
extern void sfSound_setLoop(sfSound* sound, sfBool loop);
extern sfBool sfSound_getLoop(const sfSound* sound);
extern sfSoundStatus sfSound_getStatus(const sfSound* sound);
extern void sfSound_setPitch(sfSound* sound, float pitch);
extern void sfSound_setVolume(sfSound* sound, float volume);
extern void sfSound_setPosition(sfSound* sound, sfVector3f position);
extern void sfSound_setRelativeToListener(sfSound* sound, sfBool relative);
extern void sfSound_setMinDistance(sfSound* sound, float distance);
extern void sfSound_setAttenuation(sfSound* sound, float attenuation);
extern void sfSound_setPlayingOffset(sfSound* sound, sfTime timeOffset);
extern float sfSound_getPitch(const sfSound* sound);
extern float sfSound_getVolume(const sfSound* sound);
extern sfVector3f sfSound_getPosition(const sfSound* sound);
extern sfBool sfSound_isRelativeToListener(const sfSound* sound);
extern float sfSound_getMinDistance(const sfSound* sound);
extern float sfSound_getAttenuation(const sfSound* sound);
extern sfTime sfSound_getPlayingOffset(const sfSound* sound);
extern sfSoundBuffer* sfSoundBuffer_createFromFile(const char* filename);
extern sfSoundBuffer* sfSoundBuffer_createFromMemory(const void* data, size_t sizeInBytes);
extern sfSoundBuffer* sfSoundBuffer_createFromStream(sfInputStream* stream);
extern sfSoundBuffer* sfSoundBuffer_createFromSamples(const sfInt16* samples, sfUint64 sampleCount, unsigned int channelCount, unsigned int sampleRate);
extern sfSoundBuffer* sfSoundBuffer_copy(const sfSoundBuffer* soundBuffer);
extern void sfSoundBuffer_destroy(sfSoundBuffer* soundBuffer);
extern sfBool sfSoundBuffer_saveToFile(const sfSoundBuffer* soundBuffer, const char* filename);
extern const sfInt16* sfSoundBuffer_getSamples(const sfSoundBuffer* soundBuffer);
extern sfUint64 sfSoundBuffer_getSampleCount(const sfSoundBuffer* soundBuffer);
extern unsigned int sfSoundBuffer_getSampleRate(const sfSoundBuffer* soundBuffer);
extern unsigned int sfSoundBuffer_getChannelCount(const sfSoundBuffer* soundBuffer);
extern sfTime sfSoundBuffer_getDuration(const sfSoundBuffer* soundBuffer);
extern sfSoundBufferRecorder* sfSoundBufferRecorder_create(void);
extern void sfSoundBufferRecorder_destroy(sfSoundBufferRecorder* soundBufferRecorder);
extern sfBool sfSoundBufferRecorder_start(sfSoundBufferRecorder* soundBufferRecorder, unsigned int sampleRate);
extern void sfSoundBufferRecorder_stop(sfSoundBufferRecorder* soundBufferRecorder);
extern unsigned int sfSoundBufferRecorder_getSampleRate(const sfSoundBufferRecorder* soundBufferRecorder);
extern const sfSoundBuffer* sfSoundBufferRecorder_getBuffer(const sfSoundBufferRecorder* soundBufferRecorder);
extern sfBool sfSoundBufferRecorder_setDevice(sfSoundBufferRecorder* soundBufferRecorder, const char* name);
extern const char* sfSoundBufferRecorder_getDevice(sfSoundBufferRecorder* soundBufferRecorder);
typedef sfBool (*sfSoundRecorderStartCallback)(void*); ///< Type of the callback used when starting a capture
typedef sfBool (*sfSoundRecorderProcessCallback)(const sfInt16*, size_t, void*); ///< Type of the callback used to process audio data
typedef void (*sfSoundRecorderStopCallback)(void*); ///< Type of the callback used when stopping a capture
extern sfSoundRecorder* sfSoundRecorder_create(sfSoundRecorderStartCallback onStart,
                                                        sfSoundRecorderProcessCallback onProcess,
                                                        sfSoundRecorderStopCallback onStop,
                                                        void* userData);
extern void sfSoundRecorder_destroy(sfSoundRecorder* soundRecorder);
extern sfBool sfSoundRecorder_start(sfSoundRecorder* soundRecorder, unsigned int sampleRate);
extern void sfSoundRecorder_stop(sfSoundRecorder* soundRecorder);
extern unsigned int sfSoundRecorder_getSampleRate(const sfSoundRecorder* soundRecorder);
extern sfBool sfSoundRecorder_isAvailable(void);
extern void sfSoundRecorder_setProcessingInterval(sfSoundRecorder* soundRecorder, sfTime interval);
extern const char** sfSoundRecorder_getAvailableDevices(size_t* count);
extern const char* sfSoundRecorder_getDefaultDevice();
extern sfBool sfSoundRecorder_setDevice(sfSoundRecorder* soundRecorder, const char* name);
extern const char* sfSoundRecorder_getDevice(sfSoundRecorder* soundRecorder);
extern void sfSoundRecorder_setChannelCount(sfSoundRecorder* soundRecorder, unsigned int channelCount);
extern unsigned int sfSoundRecorder_getChannelCount(const sfSoundRecorder* soundRecorder);
typedef struct
{
    sfInt16* samples; ///< Pointer to the audio samples
    unsigned int sampleCount; ///< Number of samples pointed by Samples
} sfSoundStreamChunk;
typedef sfBool (*sfSoundStreamGetDataCallback)(sfSoundStreamChunk*, void*); ///< Type of the callback used to get a sound stream data
typedef void (*sfSoundStreamSeekCallback)(sfTime, void*); ///< Type of the callback used to seek in a sound stream
extern sfSoundStream* sfSoundStream_create(sfSoundStreamGetDataCallback onGetData,
                                              sfSoundStreamSeekCallback onSeek,
                                              unsigned int channelCount,
                                              unsigned int sampleRate,
                                              void* userData);
extern void sfSoundStream_destroy(sfSoundStream* soundStream);
extern void sfSoundStream_play(sfSoundStream* soundStream);
extern void sfSoundStream_pause(sfSoundStream* soundStream);
extern void sfSoundStream_stop(sfSoundStream* soundStream);
extern sfSoundStatus sfSoundStream_getStatus(const sfSoundStream* soundStream);
extern unsigned int sfSoundStream_getChannelCount(const sfSoundStream* soundStream);
extern unsigned int sfSoundStream_getSampleRate(const sfSoundStream* soundStream);
extern void sfSoundStream_setPitch(sfSoundStream* soundStream, float pitch);
extern void sfSoundStream_setVolume(sfSoundStream* soundStream, float volume);
extern void sfSoundStream_setPosition(sfSoundStream* soundStream, sfVector3f position);
extern void sfSoundStream_setRelativeToListener(sfSoundStream* soundStream, sfBool relative);
extern void sfSoundStream_setMinDistance(sfSoundStream* soundStream, float distance);
extern void sfSoundStream_setAttenuation(sfSoundStream* soundStream, float attenuation);
extern void sfSoundStream_setPlayingOffset(sfSoundStream* soundStream, sfTime timeOffset);
extern void sfSoundStream_setLoop(sfSoundStream* soundStream, sfBool loop);
extern float sfSoundStream_getPitch(const sfSoundStream* soundStream);
extern float sfSoundStream_getVolume(const sfSoundStream* soundStream);
extern sfVector3f sfSoundStream_getPosition(const sfSoundStream* soundStream);
extern sfBool sfSoundStream_isRelativeToListener(const sfSoundStream* soundStream);
extern float sfSoundStream_getMinDistance(const sfSoundStream* soundStream);
extern float sfSoundStream_getAttenuation(const sfSoundStream* soundStream);
extern sfBool sfSoundStream_getLoop(const sfSoundStream* soundStream);
extern sfTime sfSoundStream_getPlayingOffset(const sfSoundStream* soundStream);
